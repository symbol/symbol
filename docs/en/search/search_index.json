{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Symbol documentation pages","text":"<p> User Guide Learn to do stuff without coding.</p> <p> Developer Guide Learn to do stuff by coding.</p> <p> Textbook Learn how stuff works.</p>"},{"location":"devbook/0.introduction/","title":"0.introduction","text":""},{"location":"devbook/0.introduction/#comparisons","title":"Comparisons","text":"<p>Most users will compare Symbol to one of the two major blockchain protocols: Bitcoin (a non-Turing-complete platform) or Ethereum (a 6251a85a-47d0-11ee-be56-0242ac120002:_:Turing-complete:&lt;__None__&gt;:f00a4c57a0ad4263970f6a339ef8d111 platform). It's important to understand that blockchains are tools, and as a developer you want to pick the right tool for the right job.</p> <p>However, high-level comparisons can always be helpful for both researchers and developers. Here's how Symbol compares to both.</p>"},{"location":"devbook/0.introduction/#bitcoin","title":"Bitcoin","text":"<p>Bitcoin is focused on being the best money.</p>"},{"location":"devbook/0.introduction/#ethereum","title":"Ethereum","text":"<p>Ethereum is focused on being a global compute platform. Its main innovation is the 'EVM' - the Ethereum Virtual Machine. [...]</p> <p>However, a turing complete platform introduces unintended security risks and backdoors [...]</p>"},{"location":"devbook/0.introduction/#symbol","title":"Symbol","text":"<p>Symbol is designed to sit between Bitcoin and Ethereum - it focuses on allowing you to plug-in a decentralized ledger into your existing applications, and allows you to build on-chain applications with predictable behaviors and outcomes.</p>"},{"location":"devbook/0.introduction/#link-testing-zone","title":"Link Testing Zone","text":"<p>Glossary link: 6251a85a-47d0-11ee-be56-0242ac120002:_:XYM:&lt;__None__&gt;:6f259527c6ef07834bf9b7cc0c22997c</p> <p>Autoref: XYM</p> <p>Code refs:</p> <ul> <li>Class: 6251a85a-47d0-11ee-be56-0242ac120002:Python:symbolchain.Bip32.Bip32::ecbc4c2660564e75766a1b8ac2fcf6fe, 6251a85a-47d0-11ee-be56-0242ac120002:Python:symbolchain.facade.SymbolFacade.SymbolFacade:&lt;__None__&gt;:27814c88a2ccf974de205438a6469b82 <li>Method:  6251a85a-47d0-11ee-be56-0242ac120002:Python:symbolchain.facade.SymbolFacade.SymbolFacade.create_account::637f978e93f517858f5153399f5df47a"},{"location":"devbook/1.accounts/","title":"1.accounts","text":""},{"location":"devbook/1.accounts/#accounts","title":"Accounts","text":"<p>Accounts are addresses on Symbol that can hold mosaics, metadata and namespaces. Every user or node on the network is defined by one (or more) accounts.</p>"},{"location":"devbook/1.accounts/#restrictions","title":"Restrictions","text":""},{"location":"devbook/1.accounts/#mnemonics","title":"Mnemonics","text":""},{"location":"devbook/1.accounts/#wallets","title":"Wallets","text":""},{"location":"devbook/1.accounts/#deterministic-vs-hierarchical-deterministic","title":"Deterministic vs Hierarchical Deterministic","text":""},{"location":"devbook/1.accounts/#tutorial-creating-an-account","title":"Tutorial: Creating an Account","text":"<p>Create a random account for a network by creating a <code>SymbolFacade</code> of the desired network. For most instances, it should be created around the name of a well-known network: \"mainnet\" or \"testnet\". All examples in this guide will use <code>SymbolNetwork(\"testnet\")</code></p> <p>!example create_random_account</p> <p>example output: <pre><code>    address: TCEVUET3MJE73F2VG6G3LRWKZN4A3DLX4WJ5XBA\n public key: D1CBF707D990A8C08C3EF68EFECF25B684934C16D9C8BE8B32D34DC511F13070\nprivate key: 91597A3C1FD648D630FEEB339351C168D0581F46F07FA13277F26D5EE0D40283\n</code></pre></p> <p>Alternatively, a seed phrase can be used (or randomly generated) and used to derive accounts.</p> <p>!example create_random_bip32_account</p> <p>example output: <pre><code>   mnemonic: east actual egg series spot express addict always human swallow decrease turn surround direct place burst million curious dish divorce net nephew allow height\n    address: TBDSOVXFLHZWDLGSEBEE5Z5SLD2DP7P2VDXYB7Y\n public key: E2CCAD62EEBB5826042776796D26D66611EE84411C3CDF0CA5E0B4CC2FCFBE4D\nprivate key: 984D4E4EC6AB5C772876135D88DF40F13B7B5880324A6D7F19E16DB292F8C443\n</code></pre></p>"},{"location":"devbook/1.accounts/#tutorial-key-derivation-and-verification","title":"Tutorial: Key Derivation and Verification","text":"<p> what examples here?</p>"},{"location":"devbook/1.accounts/#tutorial-create-an-account-and-fund-via-faucet","title":"Tutorial: Create an Account and Fund via Faucet","text":"<p>!example create_account_with_tokens_from_faucet</p>"},{"location":"devbook/1.accounts/#tutorial-querying-the-balance-of-an-account","title":"Tutorial: Querying the Balance of an Account","text":"<p>Account state can be easily queried using <code>/accounts/&lt;account-id&gt;</code> identifier.</p> <p>Query by address: <pre><code>curl https://${SYMBOL_API_NODE}:3001/accounts/TA4RYHMNHCFRCT2PCWOCJMWVAQ3ZCJDOTF2SGBI\n</code></pre></p> <p>Query by public key: <pre><code>curl https://${SYMBOL_API_NODE}:3001/accounts/23AC0770A1060241604A8E60A47166E3E5B4034D4EE321DBE19B342E85B21544\n</code></pre></p> <p>Getting actual balance in a generic fashion is a bit more complicated.</p> <p>First network currency id needs to be retrieved. !example get_network_currency</p> <p>Next to get currency mosaic divisibility, mosaic properties needs to be retrieved. !example get_mosaic_properties</p> <p>Finally account state can be queried and all pieces can glued together. <code>account.mosaics</code> needs to be searched for currency. Additionally amount is formatted using obtained mosaic divisibility.</p> <p>!example get_account_state !example get_account_balance</p>"},{"location":"devbook/1.accounts/#tutorial-querying-state-of-an-account-current-historical","title":"Tutorial: Querying State of an Account (Current &amp; Historical)","text":"<p>!example get_account_state</p> <p>TODO: @jaguar, what else should go here, do we want to do anything re historical?</p>"},{"location":"devbook/1.accounts/#tutorial-adding-or-modifying-account-metadata","title":"Tutorial: Adding or Modifying (Account) Metadata","text":"<p>Account can have assigned metadata. Metadata is assigned to address and either can be assigned via own account or via some other account. However, to avoid spamming account metadata by third parties, <code>account metadata transaction</code> needs to always be wrapped in an aggregate (therefore it automatically requires account owner's cosignature).</p> <p>Note, account metadata, as well as other kinds of metadata transactions, are designed to attach data that might change in future, good examples are things like home webpage URI, avatar, etc.</p> <p>There might be better ways to store (or simply encode) the data that is not expected to change.</p> <p>Assigning metadata to own account:</p> <p>!example create_account_metadata_new</p> <p>Modifying existing metadata:</p> <p>When changing/updating existing data, passed value needs to be \"xor\" result of old and new values, there's a helper for that !py symbolchain.symbol.Metadata.metadata_update_value !js symbol.metadata.metadataUpdateValue</p> <p>!example create_account_metadata_modify</p>"},{"location":"devbook/1.accounts/#tutorial-adding-modifying-or-removing-a-cosignatory","title":"Tutorial: Adding, Modifying or Removing a Cosignatory","text":"<p>In Symbol an account can be turned into multisig account using <code>multisig account modification</code> transaction. Modification requires cosignatures of all involved parties, so multisig account modification transactions is only allowed as a transaction within aggregate transaction.</p> <p>To actually cosign transactions, private keys of cosignatories are needed. In example below, the code has access to all private keys, of course, in reality every cosignatory will need to cosign on their own.</p> <p>Moreover, example below uses simpler aggregate complete, when if there are different cosignatories, it would be much more convenient to use aggregate bonded transaction (TODO: explain why it's easier to cosign bonded tx)</p> <p>Transaction preparation can be split into three phases:  1. preparations of multisig account and cosignatories,  2. transaction preparation - important part here is to sign aggregate prior to adding cosignatures,  3. adding cosignatures - this part might look bit weird, that is because it needs to convert some of SDK types into low-level catbuffer types from <code>symbolchain.sc</code> module.</p> <p>!example create_multisig_account_modification_new_account</p> <p>After this transaction 2-of-3 cosignatories are required to make any transaction, same goes for removal from multisig, due to <code>min_removal_delta</code>.</p> <p>Following example shows how two of cosignatories can swap third one for some other one. Additionally altering amount of cosignatories required for removal (<code>min_removal_delta</code>) - example is bit artificial, cause in effect single cosignatory can remove all others, which makes multisig account quite insecure.</p> <p>!example create_multisig_account_modification_modify_account</p> <p>Note, that the aggregate transaction is signed by <code>cosignatory[0]</code> key pair, but \"signer\" (or rather sender) of the modification transaction is <code>multisig_key_pair</code>.</p> <p>Cosignature of a cosignatory that is added to multisig is ALWAYS required, independent of current settings of <code>min_approval</code> or <code>min_removal</code>. Reason for this is pretty straightforward, newly added account must \"agree\" to actually become cosignatory.</p>"},{"location":"devbook/1.accounts/#tutorial-vanity-generation-and-you","title":"Tutorial: Vanity Generation and You","text":"<p>Addresses are produced from account's public key, exact format is described inside technical reference. It's only important to note, that address is a result of applying one-way function on public key. Raw symbol addresses are 24-bytes long with first byte indicating network type; for display/presentation purposes raw addresses are passed through base32 encoding.</p> <p>Combining those informations, usually addresses will look random, like so: <code>NDR6EW2WBHJQDYMNGFX2UBZHMMZC5PGL2YCZOQQ</code></p> <p>There are two vanity generators within symbol, which you can use to search for addresses that contain certain substring. In general every vanity generator works by searching for random secret keys, then producing public keys, then producing addresses and matching against user supplied string.</p> <p>The two vanity generators are:  * first one that is available in symbol/product/tools/vanity,  * second comes with catapult client, it's called <code>catapult.tools.addressgen</code>.</p> <p>Note, currently both vanity generators provide BIP-39 mnemonic which can be used in wallet apps.</p> <ol> <li>product/tools/vanity - this generator is a python script, that is supposed to be called as a module:    <pre><code>$ cd symbol/product/tools/vanity\n$ python -m vanity --blockchain symbol --network testnet --patterns HELLO --format pretty\naddress (testnet): TAHELLOCN5XFWRIAWKSPPYMATZHGXTJEI52NGBQ\n       public key: 77643BA9D1C7B3D05B8C6BDDDAB17BE5BADEF17E94746628ED321DE4E56D4967\n      private key: 9A2FC95ACB385EEC8F7AA6DDC0BC45A36A32F904038EC988E3418858994164CB\n         mnemonic: twice despair october tenant swamp second harvest lens mom violin catch response naive stomach divorce captain humble kite income ranch help bacon asthma enhance\n</code></pre>    It can search for multiple strings at once:    <pre><code>$ python -m vanity --blockchain symbol --network mainnet --patterns JPG,TXT,DOC --format pretty\naddress (mainnet): NDDOCGCLCXT5UYOCR62KTTF5LBOGYJIQG4T7TPA\n       public key: 20D84535171838BEDC663A59ABFB131668BC3226AF44DCCAC627CFC3835F5D97\n      private key: 7760F90593A88A079BD650F0A2982AC8F3F08B960D47466D1D2E922D28D9B7A8\n      mnemonic: vibrant february claim pact shine flash outdoor cube come menu train kick elbow vague illness lawsuit win episode motor squeeze ginger winter scrub razor\n\naddress (mainnet): NDJPGDCSYTDKFZDBPEWT5VHJTHYH6BE27CNLOGI\n       public key: A4202C89A878CA6988916AD5C12D51BDBD1CFAAF8A547E95581E1F6C6C70E667\n      private key: AF30757226DBDE393AFECE48949DB17AAC77DFDCDE3D1D53F8DAB66C72D22C30\n         mnemonic: tired father have permit cup tonight symptom keen churn box alien ginger one slow despair action clip stick demise segment magic steel minute harvest\n\naddress (mainnet): NDTXTYRR4CQD2WOUDC4U37BSW4DOXK245OWDNEY\n       public key: 2909CBC4031A4F6633220EF3B5E64861046807F458D580FB352981563287C03F\n      private key: 4996E13DEDAB2449DE504F32C61AF0DCD5121B672B74EB440CF7FB20097FDDD2\n      mnemonic: witness just change dentist congress find hurry surround smile lucky chest idea valid kick actual scale brother blind float broken twin reflect poet once\n</code></pre></li> <li>catapult.tools.addressgen, example invocation:    <pre><code>$ ./bin/catapult.tools.addressgen --network mainnet --input HELLO\n...\n     address (mainnet): NANFMSZRRIZDHELLO77SWVRFY53KGO3EWLOEN2Q\n       address decoded: 681A564B318A3233916B77FF2B5625C776A33B64B2DC46EA\n            public key: C20829A3EE22A9943B8A0AB0893D699CF2D6A07716A8D1789501249C64D88B2E\n           private key: 93-please-dont-use-this-its-just-for-demonstration-purposes-6410\n              mnemonic: deer grid tonight gym royal wear topple amazing message item lend tortoise    bounce carpet toward spatial camera xxx xxx xxx xxx xxx xxx coconut\n</code></pre>    While searching for 5 chars might finish in few minutes, search time increases exponentially with every    character. Searching for strings containing characters outside of base32 alphabet (i.e. <code>0</code>, <code>1</code>, <code>8</code>,    <code>9</code>) will never finish.</li> </ol> <p>Due to how base32 encoding works, the only available prefixes in mainnet are <code>NA, NB, NC, ND</code>, to    search starting at the beginning of an address prefix input with a caret sign <code>^</code>:    <pre><code>$ ./bin/catapult.tools.addressgen --network mainnet --input ^NAHELL\n     address (mainnet): NAHELLACJKBYBQGQ7ZGLOOYDFWKE2ZSWB3A3HDQ\n       address decoded: 680E45AC024A8380C0D0FE4CB73B032D944D66560EC1B38E\n            public key: B939FF4BA0F86812A6315E0D5DA179A0FD4384CE11F291B8A02E6BE46F8EFA7A\n           private key: 42-please-dont-use-this-its-just-for-demonstration-purposes-2736\n              mnemonic: man crouch imitate about carry choice idea spend nose thank merit isolate equal    raw direct spray spread xxx xxx xxx xxx xxx xxx three\n</code></pre></p>"},{"location":"devbook/2.namespaces/","title":"2.namespaces","text":""},{"location":"devbook/2.namespaces/#namespaces","title":"Namespaces","text":"<p>Namespaces are human-readable names for an account or a mosaic.</p> <p>Similar to ENS for Ethereum, Bonafida for SOL or Namebase for Handshake, namespaces are intended to map human-readable names like \"hatchet.axe\" to machine-readable identifiers such as addresses, metadata, hashes, and more.</p> <p>Symbol network has 3 levels of namespaces defined via <code>maxNamespaceDepth</code> in <code>config-network.properties</code>. Top level namespace is called root namespace.</p>"},{"location":"devbook/2.namespaces/#duration","title":"Duration","text":"<p>Namespaces have limited duration expressed in number of blocks, defined  by root-level namespace. There are two settings defining duration settings <code>minNamespaceDuration</code>, <code>maxNamespaceDuration</code>.</p> <p>TODO: explain renewal and <code>namespaceGracePeriodDuration</code></p>"},{"location":"devbook/2.namespaces/#fees","title":"Fees","text":"<p>Similar to actual domains, namespaces require fees and renewal. Currently cost of root namespace is 2 xym per block of duration, multiplied by dynamic fee multiplier (default = 100). Cost of child namespace is defined by <code>childNamespaceRentalFee</code> setting in <code>config-network.properties</code> which gets multiplied by dynamic fee multiplier (default = 100).</p> <p>In 'mainnet' value of <code>childNamespaceRentalFee</code> is 10.</p>"},{"location":"devbook/2.namespaces/#tutorial-creating-or-extending-a-namespace","title":"Tutorial: Creating or Extending a Namespace","text":"<p>Namespaces besides having maximal duration, also have minimal duration, in 'mainnet' that is 30d (2880 * 30 blocks).</p> <p>!example create_namespace_registration_root</p> <p>Registration of root namespace generates <code>BalanceTransferReceipt</code> with type <code>NamespaceRentalFee</code>.</p> <p>Child namespace: !example create_namespace_registration_child</p> <p>Registration of child namespace also generates <code>BalanceTransferReceipt</code> with type <code>NamespaceRentalFee</code>.</p>"},{"location":"devbook/2.namespaces/#tutorial-adding-modifying-or-querying-namespace-metadata","title":"Tutorial: Adding, Modifying or Querying (Namespace) Metadata","text":"<p>Namespaces - like accounts - can have assigned metadata (compare with Tutorial: Adding or Modifying Metadata).</p> <p>Example below assumes signer is also owner of the namespace.</p> <p>!example create_namespace_metadata_new</p> <p>Modify the above metadata. !example create_namespace_metadata_modify</p> <p>Query namespace metadata: <pre><code>curl https://${SYMBOL_API_NODE}:3001/metadata?targetId=D51E852A906C2DFA&amp;scopedMetadataKey=00000000656D616E`\n</code></pre></p>"},{"location":"devbook/3.mosaics/","title":"3.mosaics","text":""},{"location":"devbook/3.mosaics/#mosaics","title":"Mosaics","text":"<p>In Symbol, all tokens (including the base layer currency, $XYM) are referred to as mosaics. You can think of mosaics as similar to an ERC-20 token from Ethereum, or a colored coin from Bitcoin.</p> <p>Rather than having multiple types of tokens, Symbol instead employs a ruleset to define how tokens can be traded, brought or sold.</p> <p>The current rulesets that can be defined for mosaics are: supply, transfer, and revoke.</p> <p>Supply defines the total supply of a mosaic - that is, your token's 'cap'. It must be within a range of 0\u20138'999'999'999'000'000 atomic units. The limit is defined by <code>[insert reason here]</code>, and can be modified by changing <code>maxMosaicAtomicUnits</code> inside <code>config-network.settings</code>, in case of existing network this would result in hard fork and some more changes in the client would be needed inside https://github.com/symbol/symbol/blob/dev/client/catapult/plugins/txes/mosaic/src/validators/MosaicSupplyChangeAllowedValidator.cpp. The supply ruleset also has an additional flag, allowing for \"modifiable\" or \"fixed\" - modifiable means the total supply can be altered by the creator, whereas fixed means the total supply is defined at creation and can not be altered.</p> <p>Transfer specifies who you can transfer your mosaic to - it can be open (and thus the creator and subsequent owner can transfer it to any account on the network), or you can specify a whitelist of addresses (inclusive) or a blacklist of addresses (exclusive).</p> <p>Revoke allows the creator of a mosaic to recall the supply from holders at any time.</p>"},{"location":"devbook/3.mosaics/#tutorial-creating-a-mosaic","title":"Tutorial: Creating a Mosaic","text":"<p>Creating mosaic is either 2 or 3 step process:  1. create mosaic definition  2. create mosaic supply - which actually mints units  3. (optional) create and link namespace id to mosaic</p> <p>!example create_mosaic_definition_new</p> <p>Create a supply:</p> <p>Mosaic above has id <code>0x1788BA84888894EB</code>, following transaction will increase its supply. Supply needs to be specified in atomic units. Mosaic has divisibility set to 2, so to create 123 mosaics <code>12300</code> needs to be specified as number of units.</p> <p>!example create_mosaic_supply</p> <p>TODO: should there be namespace link here as well?</p>"},{"location":"devbook/3.mosaics/#tutorial-working-with-rules-restrictions","title":"Tutorial: Working with Rules (restrictions?)","text":"<p>There are two kind of mosaic restrictions:  * global  * address-based</p> <p>Global restrictions allow to define global rules, that determine if account is able to send or receive given mosaic.</p> <p>Mosaic from creating a mosaic example has id <code>0x1788BA84888894EB</code>.</p> <p>!example create_global_mosaic_restriction_new</p> <p>After this transaction in order to be able to send mosaic to anyone, owner first need to set mosaic address restrictions including own account.</p> <p>It's called restriction, but technically this is addresss-based mosaic-level metadata, that is accessed by global restriction rule.</p> <p>!example create_address_mosaic_restriction_1 !example create_address_mosaic_restriction_2 !example create_address_mosaic_restriction_3</p> <p>Notice, that TBOBBY account has value set to 1, while TALICE set to 2, this will be used later.</p> <p>Owner can send some <code>0x1788BA84888894EB</code> mosaic to two other accounts, both can transfer it as well.</p> <p>!example create_global_mosaic_restriction_modify</p> <p>After this transaction TALICE can send and receive transaction, but TBOBBY cannot. TBOBBY will get <code>Failure_RestrictionMosaic_Account_Unauthorized</code> as a transaction status when trying to send the mosaic.</p>"},{"location":"devbook/3.mosaics/#tutorial-adding-modifying-or-querying-mosaic-metadata","title":"Tutorial: Adding, Modifying or Querying (Mosaic) Metadata","text":"<p>Similar to account metadata, mosaic can have assigned metadata. The key used to access metadata is a pair: <code>(mosaic id, scoped key)</code>. Target address needs to be set to mosaic owner address.</p> <p>In a similar way to account metadata, mosaic metadata always require to be wrapped within an aggregate.</p> <p>In future there some scoped keys might be standardized to be used across different issuers.</p> <p>Simple mosaic metadata assignment:</p> <p>!example create_mosaic_metadata_new</p> <p>Attaching metadata to mosaic via third party:</p> <p>!example create_mosaic_metadata_cosigned_1</p> <p>Modify metadata to mosaic via third party:</p> <p>!example create_mosaic_metadata_cosigned_2</p> <p>Querying mosaic state:</p> <p>TODO: not sure if we should list all possible ways to query metadata here, especially if the API is subject to change...</p> <pre><code>curl https://${SYMBOL_API_NODE}:3001/metadata?targetId=1788BA84888894EB&amp;scopedMetadataKey=0000000074736574\n</code></pre> <p>!example get_mosaic_metadata</p>"},{"location":"devbook/3.mosaics/#tutorial-performing-an-atomic-swap","title":"Tutorial: Performing an Atomic Swap","text":"<p>Atomic swaps within Symbol network are trivial, thanks to aggregate transactions.</p> <p>Example below is using complete aggregate transaction, meaning both parties sign transaction before announcing it to the network. Alternative would be creating a lock and bonded aggregate transaction, so that the other party could cosign simply by announcing cosignature to the network.</p> <p>Cross-chain swaps can be found in advanced topics section.</p> <p>TA4RYH wants to send 200 xym to TALICE in exchange for 1 piece of mosaic <code>0x64B6D476EC60C150</code>.</p> <p>!example create_mosaic_atomic_swap</p>"},{"location":"devbook/3.mosaics/#tutorial-querying-state-of-a-mosaic-current-historical-namespace","title":"Tutorial: Querying State of a Mosaic (Current, Historical, Namespace)","text":"<p>Query mosaic state: <pre><code>curl https://${SYMBOL_API_NODE}:3001/mosaics/1788BA84888894EB\n</code></pre></p> <p> we don't have historical support currently</p>"},{"location":"devbook/4.transactions/","title":"4.transactions","text":""},{"location":"devbook/4.transactions/#transactions","title":"Transactions","text":""},{"location":"devbook/4.transactions/#simple","title":"Simple","text":""},{"location":"devbook/4.transactions/#aggregate","title":"Aggregate","text":""},{"location":"devbook/4.transactions/#multisignature","title":"Multisignature","text":""},{"location":"devbook/4.transactions/#atomic","title":"Atomic","text":"<p>TODO: isn't it the same / similar to 3.mosaics \"Tutorial: Performing an Atomic Swap\"</p>"},{"location":"devbook/4.transactions/#tutorial-querying-unconfirmed-transactions","title":"Tutorial: Querying Unconfirmed Transactions","text":"<p>!example wait_for_transaction_status</p>"},{"location":"devbook/4.transactions/#tutorial-working-with-encrypted-messages","title":"Tutorial: Working with Encrypted Messages","text":"<p>!example decrypt_utf8_message</p> <p>!example create_transfer_with_encrypted_message</p>"},{"location":"devbook/4.transactions/#tutorial-persistent-delegated-messages","title":"Tutorial: Persistent Delegated Messages","text":"<p>!example create_harvesting_delegation_message</p>"},{"location":"devbook/4.transactions/#tutorial-querying-or-modifying-deadlines","title":"Tutorial: Querying or Modifying Deadlines","text":"<p> not sure what this means?</p>"},{"location":"devbook/4.transactions/#tutorial-signing-simple-aggregate-or-multisignature-transactions","title":"Tutorial: Signing Simple, Aggregate or Multisignature Transactions","text":"<p>Manually, Automatically, Verification</p>"},{"location":"devbook/4.transactions/#tutorial-partial-bonded-transactions","title":"Tutorial: Partial (Bonded) Transactions","text":"<p>!example create_hash_lock !example create_multisig_account_modification_new_account_bonded</p>"},{"location":"devbook/5.nodes/","title":"5.nodes","text":""},{"location":"devbook/5.nodes/#nodes-api-peer-dual-voting","title":"Nodes (API, Peer, Dual, Voting)","text":""},{"location":"devbook/5.nodes/#validators","title":"Validators","text":"<p>alice</p>"},{"location":"devbook/5.nodes/#tutorial-setting-up-a-voting-node","title":"Tutorial: Setting up a Voting Node","text":"<p>bob</p>"},{"location":"devbook/5.nodes/#tutorial-setting-up-a-voting-nodefor-the-paranoid","title":"Tutorial: Setting up a Voting Node...for the Paranoid","text":"<p>charlie</p>"},{"location":"devbook/5.nodes/#tutorial-key-rotation","title":"Tutorial: Key Rotation","text":"<p>To provide some forward security, voters are required to register their voting keys via voting link (below). Voting link - besides voting public key - contains start and end epoch, when set of voting keys will be valid.</p> <p>Voting keys are generated upfront and needs to be rotated.</p> <p>!example create_voting_key_file</p>"},{"location":"devbook/5.nodes/#harvesters","title":"Harvesters","text":""},{"location":"devbook/5.nodes/#tutorial-delegating-your-stake","title":"Tutorial: Delegating your Stake","text":""},{"location":"devbook/5.nodes/#harvesting-links","title":"Harvesting Links","text":"<p>!example create_account_key_link !example create_vrf_key_link</p> <p>!example create_account_key_unlink !example create_vrf_key_unlink</p>"},{"location":"devbook/5.nodes/#voting-links","title":"Voting Links","text":"<p>!example create_voting_key_link !example create_voting_key_unlink</p>"},{"location":"devbook/5.nodes/#delegated-harvesting-links","title":"Delegated Harvesting Links","text":"<p>!example create_node_key_link !example create_node_key_unlink</p>"},{"location":"devbook/6.blocks/","title":"6.blocks","text":""},{"location":"devbook/6.blocks/#blocks","title":"Blocks","text":""},{"location":"devbook/6.blocks/#harvesting","title":"Harvesting","text":"<p>In Symbol, new blocks are created through a process called harvesting.</p>"},{"location":"devbook/6.blocks/#finalization","title":"Finalization","text":""},{"location":"devbook/6.blocks/#trees","title":"Trees","text":""},{"location":"devbook/6.blocks/#roots-leaves","title":"Roots &amp; Leaves","text":""},{"location":"devbook/6.blocks/#merkle-trees","title":"Merkle Trees","text":""},{"location":"devbook/6.blocks/#patricia-trees","title":"Patricia Trees","text":""},{"location":"devbook/6.blocks/#tutorial-querying-finalization-height","title":"Tutorial: Querying Finalization Height","text":"<p>!example get_network_finalized_height</p>"},{"location":"devbook/6.blocks/#tutorial-querying-current-height","title":"Tutorial: Querying Current Height","text":"<p>!example get_network_height</p>"},{"location":"devbook/6.blocks/#tutorial-working-with-proofs","title":"Tutorial: Working with Proofs","text":"<p>!example prove_confirmed_transaction !example prove_xym_mosaic_state</p>"},{"location":"devbook/7.xym/","title":"7.xym","text":""},{"location":"devbook/7.xym/#xym","title":"XYM","text":"<p>XYM is the base-layer currency of Symbol. Any activity on the blockchain - from recording data to sending assets or messages - requires a small fee of XYM, which rewards validators who create and finalize blocks.</p>"},{"location":"devbook/7.xym/#tutorial-querying-xym-supply","title":"Tutorial: Querying XYM Supply","text":"<p>Maximum supply is the maximum number of XYM that can ever be minted. <pre><code>curl https://${SYMBOL_API_NODE}:3001/network/currency/supply/max\n</code></pre> !example get_maximum_supply</p> <p>Total supply is the number of XYM minted to date. <pre><code>curl https://${SYMBOL_API_NODE}:3001/network/currency/supply/total\n</code></pre> !example get_total_supply</p> <p>Circulating supply is the number of XYM minted to date, excluding the balances of the two fee sinks: 1. VORTEX4: Mosaic and namespace rental fee sink 2. VORTEX3: Network fee sink</p> <p><pre><code>curl https://${SYMBOL_API_NODE}:3001/network/currency/supply/circulating\n</code></pre> !example get_circulating_supply</p>"},{"location":"devbook/7.xym/#tutorial-querying-current-block-rewards","title":"Tutorial: Querying Current Block Rewards","text":"<p> this is not currently supported by REST; best we can do is read reward from CURRENT block</p>"},{"location":"devbook/7.xym/#tutorial-querying-historical-block-rewards","title":"Tutorial: Querying Historical Block Rewards","text":"<p> we can get this from block height, is that desire?</p>"},{"location":"devbook/8.advanced/","title":"8.advanced","text":""},{"location":"devbook/8.advanced/#advanced-topics","title":"Advanced topics","text":""},{"location":"devbook/8.advanced/#cross-chain-swaps","title":"Cross-chain swaps","text":"<p>Symbol's secret lock and secret proof can be compared to hashed timelock contract in other blockchains. Thanks to them cross-chain swaps can be made.</p>"},{"location":"devbook/8.advanced/#example-ethxym-cross-chain-swap","title":"Example: ETH\u27f7XYM cross-chain swap","text":"<p>To make cross chain swap with Ethereum there's a contract needed. Exemplary contract is available in https://github.com/gimre-xymcity/hashed-timelock-contract-ethereum.</p> <p>Warning</p> <p>This contract is not production ready. Few things that should be taken care of: * timing lock/contract expiry is crucial for security of both parties (see explanation after Guts) * due to gas involved, ETH contract should use sha3 instead of double sha256, * unfortunately, sha3 opcode in EVM is actually keccak256, * although Symbol uses sha3 it does not older variant usually referred to as keccak, <code>Op_Sha3_256</code> lock type is actual sha3 not keccak; adding keccak would require fork</p> <p>Contract has been deployed on Sepolia testnet under address 0xd58e030bd21c7788897aE5Ea845DaBA936e91D2B.</p> <p>The contract contains following methods, that will be used:  1. <code>newContract(address receiver, bytes32 lock, uint timelock)</code> - creates new lock where destination account is <code>receiver</code>, <code>lock</code> is a secret lock, and <code>timelock</code> is unix epoch-based timestap limit, until which withdrawal is possible - this is almost 1-to-1 Symbol's <code>secret lock transaction</code>  2. <code>withdraw(bytes32 contractId, bytes preimage)</code> - allows to withdraw funds given valid <code>preimage</code>; note, that this method must be called by whoever is <code>receiver</code> in 1. - this is similar to Symbol's <code>secret proof transaction</code>, although Symbol allows sending it from unrelated account, but it's still <code>receiver</code> that will get the funds  3. <code>refund(bytes32 contractId)</code> - available after lock expires, only owner of a lock can call it to refund what's inside the lock - in Symbol refund happens automatically after lock expires and generates <code>BalanceChangeReceipt</code> within a block with type <code>LockSecret_Expired</code>.</p> <p>There are multiple scenarios, how cross-chain swap scenario can look like, the following is just an example. We have two parties Alice and Bob, with following addresses:</p> ETH Symbol Alice 0xa11cec3497B522a25c08Dd45Cc07663311E04f10 TALICECI35BNIJQA5CNUKI2DY3SXNEHPZJSOVAA Bob 0xb0bb12D1befe54Dc773CefE7BB3687c72a33d335 TBOBBYKOYQBWK3HSX7NQVJ5JFPE22352AVDXXAA <p>Scenario:  1. in Ethereum: 0xa11ce creates a new lock via <code>newContract</code> call with <code>receiver</code> = 0xb0bb1, only Alice knows the preimage (proof) to a used <code>lock</code>  2. in Symbol: TBOBBY creates secret lock with recipient set to TALICE, Bob is using SAME lock value as Alice; note, this lock should have duration that will expire a bit before lock created by Alice in Ethereum  3. in Symbol: Alice withdrawals funds by issuing secret proof with a proper preimage  4. in Ethereum: Bob learned preimage from proof published in Symbol network so he can now call <code>withdraw</code> in ethereum</p> <p>Guts:</p> <p>Finally some hands-on. For ethereum, example below will use tools from foundry toolkit.</p> <p>Alice will swap 0.2 ETH with Bob for 7887 XYM.</p> <ol> <li>Alice creates a lock:<code>cast send --value 0.2ether 0xd58e030bd21c7788897aE5Ea845DaBA936e91D2B 'newContract(address,bytes32,uint)' 0xb0bb12D1befe54Dc773CefE7BB3687c72a33d335 b867db875479bcc0287352cdaa4a1755689b8338777d0915e9acd9f6edbc96cb 1663568700</code><ol> <li>0xd58e030bd21c7788897aE5Ea845DaBA936e91D2B is the contract address mentioned earlier</li> <li>0xb0bb12D1befe54Dc773CefE7BB3687c72a33d335 - is bob eth destination,</li> <li>b867\u202696cb - is the lock value,</li> <li>finally 1663568700 is a timestamp corresponding to Monday, 19 September 2022 06:25:00 GMT,</li> <li>corresponding tx on Sepolia testnet: 0x23265e1a9aaaa70d582369fd3edbbe20b2f44a3a18a0a96205fb8beac8689964,</li> <li>as can be seen in transaction logs, <code>contractId</code> (read: identifier of created lock) is <code>0x81b0f164348bb17de94cca31b8d41ce435321aa2bb5721eb5c90cadd886e4c3f</code></li> </ol> </li> <li>Bob creates lock inside Symbol:<ol> <li>First bob needs to turn Alice's timelock into secret lock duration.</li> <li>Current testnet block at the time of writing is 697357, with network timestamp: 25407256928.</li> <li>Alice's unix epoch-based timestamp needs to be converted to Symbol network timestamp, additionally, we want to lower it by two hours, so that lock in Symbol expires prior to corresponding lock in eth (see explanation below)    <pre><code>timelock_datetime = datetime.fromtimestamp(unix_epoch_timelock, tz=timezone.utc)\nsymbol_timestamp = facade.network.from_datetime(timelock_datetime)\nsymbol_timestamp.add_hours(-2)\n</code></pre></li> <li>Produced network timestamp needs to be turned into block-based duration. Network timestamps are in milliseconds, so difference needs to be divided by 1000. Symbol testnet network block generation target time is 30s, so to obtain number of blocks:    <pre><code>duration = int((symbol_timestamp.timestamp - 25407256928) / 1000 / 30)\n# (25719853000 - 25407256928) / 1000 / 30 = 10419\n</code></pre></li> <li>Finally Bob can create secret lock     !example create_secret_lock</li> </ol> </li> <li>Now Alice can claim the lock, that part is substantially easier:<ol> <li>create secret proof (withdraw)     !example create_secret_proof</li> </ol> </li> <li>Now that Bob has learned super complicated proof he can use contract's <code>withdraw</code> method:<code>cast send 0xd58e030bd21c7788897aE5Ea845DaBA936e91D2B 'withdraw(bytes32, bytes)' 0x81b0f164348bb17de94cca31b8d41ce435321aa2bb5721eb5c90cadd886e4c3f 636F727265637420686F727365206261747465727920737461706C65</code><ol> <li><code>0xd58e030bd21c7788897aE5Ea845DaBA936e91D2B</code> is a contract address, the same one as used by Alice,</li> <li><code>0x81b0f164348bb17de94cca31b8d41ce435321aa2bb5721eb5c90cadd886e4c3f</code> is a lock contract id (<code>contractId</code>),</li> <li><code>636F727265637420686F727365206261747465727920737461706C65</code> - i.e. found in Symbol's testnet explorer (from earlier),</li> <li>corresponding transaction on Sepolia testnet: <code>0x14eef724a76ae2aa29b0c405cbc0da2af3c7827e198bfdbbdadbb27eb67a2c05</code></li> </ol> </li> <li>And they lived happily ever after.</li> </ol> <p>As mentioned in 2.3 lock created in symbol should be slightly shorter. If it would be longer, or in general if ETH timelock will expire before Symbol's lock, Alice could cheat Bob, simply by waiting until eth timelock expires and then publishing both:  * withdraw (secret proof transaction) inside Symbol network  * calling <code>refund(...)</code> method inside Ethereum network.</p> <p>TODO: hands-on example with expired locks</p>"},{"location":"devbook/9.catapult/","title":"9.catapult","text":""},{"location":"devbook/9.catapult/#catapult","title":"Catapult","text":"<p>Catapult is the reference client for Symbol. Written in C++, Catapult's key innovation is composibility.</p>"},{"location":"devbook/9.catapult/#architecture","title":"Architecture","text":""},{"location":"devbook/9.catapult/#plugins","title":"Plugins","text":"<p>Each feature that makes up Symbol is defined as a plugin. All nodes within same network need to share same set of plugins.</p> <p> what should go here?</p>"},{"location":"devbook/9.catapult/#transaction-plugins","title":"Transaction Plugins","text":""},{"location":"devbook/9.catapult/#account_link","title":"Account_Link","text":""},{"location":"devbook/9.catapult/#aggregate","title":"Aggregate","text":""},{"location":"devbook/9.catapult/#lock_hash","title":"Lock_Hash","text":""},{"location":"devbook/9.catapult/#lock_secret","title":"Lock_Secret","text":""},{"location":"devbook/9.catapult/#lock_shared","title":"Lock_Shared","text":""},{"location":"devbook/9.catapult/#metadata","title":"Metadata","text":""},{"location":"devbook/9.catapult/#mosaic","title":"Mosaic","text":""},{"location":"devbook/9.catapult/#multisig","title":"Multisig","text":""},{"location":"devbook/9.catapult/#namespace","title":"Namespace","text":""},{"location":"devbook/9.catapult/#restriction_account","title":"Restriction_Account","text":""},{"location":"devbook/9.catapult/#restriction_mosaic","title":"Restriction_Mosaic","text":""},{"location":"devbook/9.catapult/#transfer","title":"Transfer","text":""},{"location":"devbook/9.catapult/#core-plugins","title":"Core Plugins","text":""},{"location":"devbook/9.catapult/#importance","title":"Importance","text":""},{"location":"devbook/9.catapult/#observers","title":"Observers","text":""},{"location":"devbook/9.catapult/#voting","title":"Voting","text":""},{"location":"devbook/9.catapult/#validators","title":"Validators","text":""},{"location":"devbook/9.catapult/#services","title":"Services","text":""},{"location":"devbook/9.catapult/#hashcache","title":"HashCache","text":""},{"location":"devbook/9.catapult/#signature","title":"Signature","text":""},{"location":"devbook/9.catapult/#configuration","title":"Configuration","text":""},{"location":"devbook/9.catapult/#tutorial-working-with-mongodb","title":"Tutorial: Working with MongoDB","text":""},{"location":"devbook/9.catapult/#tutorial-working-with-rest","title":"Tutorial: Working with REST","text":"<p> are existing REST docs good enough?</p>"},{"location":"devbook/9.catapult/#tutorial-working-with-websockets","title":"Tutorial: Working with Websockets","text":"<p>!example read_websocket_block !example read_websocket_transaction_flow !example read_websocket_transaction_bonded_flow !example read_websocket_transaction_error</p> <p>TODO - add finalizedBlock example when network is restarted</p>"},{"location":"devbook/a.catbuffer/","title":"A.catbuffer","text":""},{"location":"devbook/a.catbuffer/#catbuffer","title":"Catbuffer","text":""},{"location":"devbook/a.catbuffer/#introduction-to-dsls","title":"Introduction to DSLs","text":"<p>!inline cats_dsl @catbuffer/parser</p>"},{"location":"devbook/a.catbuffer/#schemas","title":"Schemas","text":""},{"location":"devbook/b.analytics/","title":"B.analytics","text":""},{"location":"devbook/b.analytics/#analytics","title":"Analytics","text":""},{"location":"devbook/b.analytics/#querying-network-mosaics","title":"Querying Network Mosaics","text":"<p> what examples are desired here?</p>"},{"location":"devbook/b.analytics/#tutorial-querying-total-mosaics-issued-on-symbol","title":"Tutorial: Querying Total Mosaics Issued on Symbol","text":"<p> i don't think we can do this via REST but can via mongo</p>"},{"location":"devbook/b.analytics/#tutorial-querying-total-nodes-active","title":"Tutorial: Querying Total Nodes Active","text":"<p> a node can only return nodes it knows about from its view. is that intent or should example crawl.</p>"},{"location":"devbook/b.analytics/#tutorial-working-with-block-blk-data","title":"Tutorial: Working with Block (.blk) Data","text":"<p>Catapult is storing blocks within data directory. There are two optimizations:  * catapult stores multiple blocks in a single file, this is dependent on <code>fileDatabaseBatchSize</code> setting within config-node.configuration, by default it is set to 100  * catapult stores block files (and statements) within subdirectories, there are at most 10_000 objects per directory, that means that with setting above, there will be 100 block files within single subirectory.</p> <p>Every block file starts with a small header, that contains absolute ofsset within a file to start of a block.</p> <p>Following examples, will show how to find files and start offsets of few blocks, given settings above.</p> <p>Example 1. Nemesis block</p> <ol> <li>Nemesis block has height = 1, first height needs to be rounded to a batch file id using <code>fileDatabaseBatchSize</code>, <code>(1 / fileDatabaseBatchSize) * fileDatabaseBatchSize</code> = 0</li> <li>next the path to actual batch file is <code>&lt;directory&gt;/&lt;filename&gt;.dat</code>, where <code>directory</code> is <code>id / 10_000</code> and <code>filename</code> is <code>id % 10_000</code>, both are padded with additional zeroes; In this trivial case, this results in path <code>00000/00000.dat</code></li> <li>The header contains 100 8-byte words, with offsets for blocks 0-99, there is no block with height 0, so the entry contains 0, offset to nemesis block will be second word  (and with default settings mentioned above = 0x320)</li> </ol> <p>Example 2. Block 1690553 (1.0.3.4 protocol fork height)  1. round to batch file id: <code>(1690553 / fileDatabaseBatchSize) * fileDatabaseBatchSize</code> = 1690500  2. directory name <code>1690500 / 10_000</code>, so directory name is <code>00169</code>, filename = <code>1690500 % 10_000</code>, so filname is <code>00500.dat</code>  3. header contains offsets for blocks 1690500-1690599, block in question will be at entry 53 (0-based) <pre><code>00000190: 549d000000000000 34a0000000000000  T.......4.......\n000001a0: 0ca4000000000000 eca6000000000000  ................\n000001b0: 94ab000000000000 74ae000000000000  ........t.......\n</code></pre> the offset at position 53 is 0xA6EC: <pre><code>0000a6e0: .... .... .... .... .... .... 0003 0000              ....\n0000a6f0: 0000 0000 &lt; signature data .. .... ....  ................\n0000a700: .... .... .... .... .... .... .... ....  ................\n0000a710: .... .... .... .... .... .... .... ....  ................\n0000a720: .... .... .... .... .... .... .... ....  ................\n0000a730: .... .... &lt; public key . .... .... ....  ................\n0000a740: .... .... .... .... .... .... .... ....  ................\n0000a750: .... ...&gt; 0000 0000 0168 4381 b9cb 1900  .........hC.....\n</code></pre></p> <p>0x19cbb9 visible at offset 0xA75C is the block height in hex.</p> <p>Example 3. Block 1835458 (latest at the moment of writing)  1. round to batch file id: <code>(1835458 / fileDatabaseBatchSize) * fileDatabaseBatchSize</code> = 1835400  2. directory name is <code>00183</code>, file name is <code>05400.dat</code>  3. header contains offsets for blocks 1835400-1835499, block in question will be at entry 58 <pre><code>000001c0: c8a6000000000000 a8a9000000000000  ................\n000001d0: 88ac000000000000 0000000000000000  ................\n000001e0: 0000000000000000 0000000000000000  ................\n</code></pre></p> <p>Note: that since this is latest block, all further entries in the offset map are zeroed</p> <p>Parsing block data is much simpler thanks to catbuffer generated model code.</p> <p>!example BlockDigester</p>"},{"location":"devbook/c.other/","title":"C.other","text":""},{"location":"devbook/c.other/#other","title":"OTHER","text":"<p>!example create_mosaic_definition_modify !example create_mosaic_revocation !example create_mosaic_transfer !example get_network_time</p>"},{"location":"devbook/reference/py/AccountDescriptorRepository/","title":"AccountDescriptorRepository","text":""},{"location":"devbook/reference/py/AccountDescriptorRepository/#symbolchain.AccountDescriptorRepository.AccountDescriptor","title":"<code>AccountDescriptor</code>","text":"symbolchain.AccountDescriptorRepository.AccountDescriptor <p>Represents an account.</p>"},{"location":"devbook/reference/py/AccountDescriptorRepository/#symbolchain.AccountDescriptorRepository.AccountDescriptor.__init__","title":"<code>__init__(descriptor_yaml)</code>","text":"symbolchain.AccountDescriptorRepository.AccountDescriptor.__init__ <p>Creates a descriptor from a yaml container.</p>"},{"location":"devbook/reference/py/AccountDescriptorRepository/#symbolchain.AccountDescriptorRepository.AccountDescriptorRepository","title":"<code>AccountDescriptorRepository</code>","text":"symbolchain.AccountDescriptorRepository.AccountDescriptorRepository <p>Loads read-only account descriptors from YAML.</p>"},{"location":"devbook/reference/py/AccountDescriptorRepository/#symbolchain.AccountDescriptorRepository.AccountDescriptorRepository.__init__","title":"<code>__init__(yaml_input)</code>","text":"symbolchain.AccountDescriptorRepository.AccountDescriptorRepository.__init__ <p>Loads account descriptors from the specified input.</p>"},{"location":"devbook/reference/py/AccountDescriptorRepository/#symbolchain.AccountDescriptorRepository.AccountDescriptorRepository.find_all_by_role","title":"<code>find_all_by_role(role)</code>","text":"symbolchain.AccountDescriptorRepository.AccountDescriptorRepository.find_all_by_role <p>Finds all account descriptors with a matching role.</p>"},{"location":"devbook/reference/py/AccountDescriptorRepository/#symbolchain.AccountDescriptorRepository.AccountDescriptorRepository.find_by_address","title":"<code>find_by_address(address)</code>","text":"symbolchain.AccountDescriptorRepository.AccountDescriptorRepository.find_by_address <p>Finds the account descriptor with a matching address.</p>"},{"location":"devbook/reference/py/AccountDescriptorRepository/#symbolchain.AccountDescriptorRepository.AccountDescriptorRepository.find_by_public_key","title":"<code>find_by_public_key(public_key)</code>","text":"symbolchain.AccountDescriptorRepository.AccountDescriptorRepository.find_by_public_key <p>Finds the account descriptor with a matching public key.</p>"},{"location":"devbook/reference/py/AccountDescriptorRepository/#symbolchain.AccountDescriptorRepository.AccountDescriptorRepository.to_type_parsing_rules_map","title":"<code>to_type_parsing_rules_map(type_to_property_mapping)</code>","text":"symbolchain.AccountDescriptorRepository.AccountDescriptorRepository.to_type_parsing_rules_map <p>Builds a type to parsing rule map.</p>"},{"location":"devbook/reference/py/AccountDescriptorRepository/#symbolchain.AccountDescriptorRepository.AccountDescriptorRepository.try_find_by_name","title":"<code>try_find_by_name(name)</code>","text":"symbolchain.AccountDescriptorRepository.AccountDescriptorRepository.try_find_by_name <p>Finds the account descriptor with a matching name or None if no matching descriptors are found.</p>"},{"location":"devbook/reference/py/ArrayHelpers/","title":"ArrayHelpers","text":""},{"location":"devbook/reference/py/ArrayHelpers/#symbolchain.ArrayHelpers.ArrayHelpers","title":"<code>ArrayHelpers</code>","text":"symbolchain.ArrayHelpers.ArrayHelpers"},{"location":"devbook/reference/py/ArrayHelpers/#symbolchain.ArrayHelpers.ArrayHelpers.align_up","title":"<code>align_up(size, alignment)</code>  <code>staticmethod</code>","text":"symbolchain.ArrayHelpers.ArrayHelpers.align_up <p>Calculates aligned size.</p>"},{"location":"devbook/reference/py/ArrayHelpers/#symbolchain.ArrayHelpers.ArrayHelpers.get_bytes","title":"<code>get_bytes(view, size)</code>  <code>staticmethod</code>","text":"symbolchain.ArrayHelpers.ArrayHelpers.get_bytes <p>Returns first size bytes of view.</p>"},{"location":"devbook/reference/py/ArrayHelpers/#symbolchain.ArrayHelpers.ArrayHelpers.read_array","title":"<code>read_array(view, factory_class, accessor=None)</code>  <code>staticmethod</code>","text":"symbolchain.ArrayHelpers.ArrayHelpers.read_array <p>Reads array of objects.</p>"},{"location":"devbook/reference/py/ArrayHelpers/#symbolchain.ArrayHelpers.ArrayHelpers.read_array_count","title":"<code>read_array_count(view, factory_class, count, accessor=None)</code>  <code>staticmethod</code>","text":"symbolchain.ArrayHelpers.ArrayHelpers.read_array_count <p>Reads array of deterministic number of objects.</p>"},{"location":"devbook/reference/py/ArrayHelpers/#symbolchain.ArrayHelpers.ArrayHelpers.read_variable_size_elements","title":"<code>read_variable_size_elements(view, factory_class, alignment, skip_last_element_padding=False)</code>  <code>staticmethod</code>","text":"symbolchain.ArrayHelpers.ArrayHelpers.read_variable_size_elements <p>Reads array of variable size objects.</p>"},{"location":"devbook/reference/py/ArrayHelpers/#symbolchain.ArrayHelpers.ArrayHelpers.size","title":"<code>size(elements, alignment=0, skip_last_element_padding=False)</code>  <code>staticmethod</code>","text":"symbolchain.ArrayHelpers.ArrayHelpers.size <p>Calculates size of variable size objects.</p>"},{"location":"devbook/reference/py/ArrayHelpers/#symbolchain.ArrayHelpers.ArrayHelpers.write_array","title":"<code>write_array(elements, accessor=None)</code>  <code>staticmethod</code>","text":"symbolchain.ArrayHelpers.ArrayHelpers.write_array <p>Writes array of objects.</p>"},{"location":"devbook/reference/py/ArrayHelpers/#symbolchain.ArrayHelpers.ArrayHelpers.write_array_count","title":"<code>write_array_count(elements, count, accessor=None)</code>  <code>staticmethod</code>","text":"symbolchain.ArrayHelpers.ArrayHelpers.write_array_count <p>Writes array of deterministic number of objects.</p>"},{"location":"devbook/reference/py/ArrayHelpers/#symbolchain.ArrayHelpers.ArrayHelpers.write_variable_size_elements","title":"<code>write_variable_size_elements(elements, alignment, skip_last_element_padding=False)</code>  <code>staticmethod</code>","text":"symbolchain.ArrayHelpers.ArrayHelpers.write_variable_size_elements <p>Writes array of variable size objects.</p>"},{"location":"devbook/reference/py/BaseValue/","title":"BaseValue","text":""},{"location":"devbook/reference/py/BaseValue/#symbolchain.BaseValue.BaseValue","title":"<code>BaseValue</code>","text":"<p>               Bases: <code>Ordered</code></p> symbolchain.BaseValue.BaseValue <p>Represents a base int.</p>"},{"location":"devbook/reference/py/BaseValue/#symbolchain.BaseValue.BaseValue.__init__","title":"<code>__init__(size, value, tag=None, signed=False)</code>","text":"symbolchain.BaseValue.BaseValue.__init__ <p>Creates a base value.</p>"},{"location":"devbook/reference/py/BaseValue/#symbolchain.BaseValue.BaseValue.to_json","title":"<code>to_json()</code>","text":"symbolchain.BaseValue.BaseValue.to_json <p>Returns representation of this object that can be stored in JSON.</p>"},{"location":"devbook/reference/py/Bip32/","title":"Bip32","text":""},{"location":"devbook/reference/py/Bip32/#symbolchain.Bip32.Bip32","title":"<code>Bip32</code>","text":"symbolchain.Bip32.Bip32 <p>Factory of BIP32 root nodes</p>"},{"location":"devbook/reference/py/Bip32/#symbolchain.Bip32.Bip32.__init__","title":"<code>__init__(curve_name='ed25519', mnemonic_language='english')</code>","text":"symbolchain.Bip32.Bip32.__init__ <p>Creates a BIP32 root node factory.</p>"},{"location":"devbook/reference/py/Bip32/#symbolchain.Bip32.Bip32.from_mnemonic","title":"<code>from_mnemonic(mnemonic, password)</code>","text":"symbolchain.Bip32.Bip32.from_mnemonic <p>Creates a BIP32 root node from a BIP39 mnemonic and password.</p>"},{"location":"devbook/reference/py/Bip32/#symbolchain.Bip32.Bip32.from_seed","title":"<code>from_seed(seed)</code>","text":"symbolchain.Bip32.Bip32.from_seed <p>Creates a BIP32 root node from a seed.</p>"},{"location":"devbook/reference/py/Bip32/#symbolchain.Bip32.Bip32.random","title":"<code>random(seed_length=32)</code>","text":"symbolchain.Bip32.Bip32.random <p>Creates a random BIP32 mnemonic.</p>"},{"location":"devbook/reference/py/Bip32/#symbolchain.Bip32.Bip32Node","title":"<code>Bip32Node</code>","text":"symbolchain.Bip32.Bip32Node <p>Representation of a BIP32 node.</p>"},{"location":"devbook/reference/py/Bip32/#symbolchain.Bip32.Bip32Node.__init__","title":"<code>__init__(hmac_key, data)</code>","text":"symbolchain.Bip32.Bip32Node.__init__ <p>Creates a BIP32 node around a key and data.</p>"},{"location":"devbook/reference/py/Bip32/#symbolchain.Bip32.Bip32Node.derive_one","title":"<code>derive_one(identifier)</code>","text":"symbolchain.Bip32.Bip32Node.derive_one <p>Derives a direct child node with specified identifier.</p>"},{"location":"devbook/reference/py/Bip32/#symbolchain.Bip32.Bip32Node.derive_path","title":"<code>derive_path(path)</code>","text":"symbolchain.Bip32.Bip32Node.derive_path <p>Derives a descendent node with specified path.</p>"},{"location":"devbook/reference/py/BlockchainSettings/","title":"BlockchainSettings","text":""},{"location":"devbook/reference/py/BlockchainSettings/#symbolchain.BlockchainSettings.BlockchainSettings","title":"<code>BlockchainSettings</code>","text":"symbolchain.BlockchainSettings.BlockchainSettings <p>Settings describing a blockchain.</p>"},{"location":"devbook/reference/py/BlockchainSettings/#symbolchain.BlockchainSettings.BlockchainSettings.__init__","title":"<code>__init__(settings_dict)</code>","text":"symbolchain.BlockchainSettings.BlockchainSettings.__init__ <p>Creates blockchain settings from a dictionary.</p>"},{"location":"devbook/reference/py/BlockchainSettings/#symbolchain.BlockchainSettings.BlockchainSettings.load_from_yaml","title":"<code>load_from_yaml(yaml_input)</code>  <code>staticmethod</code>","text":"symbolchain.BlockchainSettings.BlockchainSettings.load_from_yaml <p>Loads settings from YAML.</p>"},{"location":"devbook/reference/py/BufferReader/","title":"BufferReader","text":""},{"location":"devbook/reference/py/BufferReader/#symbolchain.BufferReader.BufferReader","title":"<code>BufferReader</code>","text":"symbolchain.BufferReader.BufferReader <p>Reads data from an in memory buffer.</p>"},{"location":"devbook/reference/py/BufferReader/#symbolchain.BufferReader.BufferReader.eof","title":"<code>eof</code>  <code>property</code>","text":"<p>Returns true if the reader is at eof.</p>"},{"location":"devbook/reference/py/BufferReader/#symbolchain.BufferReader.BufferReader.__init__","title":"<code>__init__(buffer, byte_order='little')</code>","text":"symbolchain.BufferReader.BufferReader.__init__ <p>Creates a reader with specified byte order.</p>"},{"location":"devbook/reference/py/BufferReader/#symbolchain.BufferReader.BufferReader.read_bytes","title":"<code>read_bytes(count)</code>","text":"symbolchain.BufferReader.BufferReader.read_bytes <p>Reads bytes.</p>"},{"location":"devbook/reference/py/BufferReader/#symbolchain.BufferReader.BufferReader.read_hex_string","title":"<code>read_hex_string(count)</code>","text":"symbolchain.BufferReader.BufferReader.read_hex_string <p>Reads a hex string.</p>"},{"location":"devbook/reference/py/BufferReader/#symbolchain.BufferReader.BufferReader.read_int","title":"<code>read_int(count)</code>","text":"symbolchain.BufferReader.BufferReader.read_int <p>Reads an integer.</p>"},{"location":"devbook/reference/py/BufferReader/#symbolchain.BufferReader.BufferReader.read_string","title":"<code>read_string(count)</code>","text":"symbolchain.BufferReader.BufferReader.read_string <p>Reads a string.</p>"},{"location":"devbook/reference/py/BufferWriter/","title":"BufferWriter","text":""},{"location":"devbook/reference/py/BufferWriter/#symbolchain.BufferWriter.BufferWriter","title":"<code>BufferWriter</code>","text":"symbolchain.BufferWriter.BufferWriter <p>Writes data to an in memory buffer.</p>"},{"location":"devbook/reference/py/BufferWriter/#symbolchain.BufferWriter.BufferWriter.__init__","title":"<code>__init__(byte_order='little')</code>","text":"symbolchain.BufferWriter.BufferWriter.__init__ <p>Creates a writer with specified byte order.</p>"},{"location":"devbook/reference/py/BufferWriter/#symbolchain.BufferWriter.BufferWriter.write_bytes","title":"<code>write_bytes(value)</code>","text":"symbolchain.BufferWriter.BufferWriter.write_bytes <p>Writes bytes.</p>"},{"location":"devbook/reference/py/BufferWriter/#symbolchain.BufferWriter.BufferWriter.write_hex_string","title":"<code>write_hex_string(value)</code>","text":"symbolchain.BufferWriter.BufferWriter.write_hex_string <p>Writes a hex string.</p>"},{"location":"devbook/reference/py/BufferWriter/#symbolchain.BufferWriter.BufferWriter.write_int","title":"<code>write_int(value, count)</code>","text":"symbolchain.BufferWriter.BufferWriter.write_int <p>Writes an integer.</p>"},{"location":"devbook/reference/py/BufferWriter/#symbolchain.BufferWriter.BufferWriter.write_string","title":"<code>write_string(value)</code>","text":"symbolchain.BufferWriter.BufferWriter.write_string <p>Writes a string.</p>"},{"location":"devbook/reference/py/ByteArray/","title":"ByteArray","text":""},{"location":"devbook/reference/py/ByteArray/#symbolchain.ByteArray.ByteArray","title":"<code>ByteArray</code>","text":"<p>               Bases: <code>Ordered</code></p> symbolchain.ByteArray.ByteArray <p>Represents a fixed size byte array.</p>"},{"location":"devbook/reference/py/ByteArray/#symbolchain.ByteArray.ByteArray.__init__","title":"<code>__init__(fixed_size, array_input, tag=None)</code>","text":"symbolchain.ByteArray.ByteArray.__init__ <p>Creates a byte array from bytes or hex string.</p>"},{"location":"devbook/reference/py/ByteArray/#symbolchain.ByteArray.ByteArray.to_json","title":"<code>to_json()</code>","text":"symbolchain.ByteArray.ByteArray.to_json <p>Returns representation of this object that can be stored in JSON.</p>"},{"location":"devbook/reference/py/Cipher/","title":"Cipher","text":""},{"location":"devbook/reference/py/Cipher/#symbolchain.Cipher.AesCbcCipher","title":"<code>AesCbcCipher</code>","text":"symbolchain.Cipher.AesCbcCipher <p>Performs AES CBC encryption and decryption with a given key.</p>"},{"location":"devbook/reference/py/Cipher/#symbolchain.Cipher.AesCbcCipher.__init__","title":"<code>__init__(aes_key)</code>","text":"symbolchain.Cipher.AesCbcCipher.__init__ <p>Creates a cipher around an aes shared key.</p>"},{"location":"devbook/reference/py/Cipher/#symbolchain.Cipher.AesCbcCipher.decrypt","title":"<code>decrypt(cipher_text, iv)</code>","text":"symbolchain.Cipher.AesCbcCipher.decrypt <p>Decrypts cipher text.</p>"},{"location":"devbook/reference/py/Cipher/#symbolchain.Cipher.AesCbcCipher.encrypt","title":"<code>encrypt(clear_text, iv)</code>","text":"symbolchain.Cipher.AesCbcCipher.encrypt <p>Encrypts clear text.</p>"},{"location":"devbook/reference/py/Cipher/#symbolchain.Cipher.AesGcmCipher","title":"<code>AesGcmCipher</code>","text":"symbolchain.Cipher.AesGcmCipher <p>Performs AES GCM encryption and decryption with a given key.</p>"},{"location":"devbook/reference/py/Cipher/#symbolchain.Cipher.AesGcmCipher.__init__","title":"<code>__init__(aes_key)</code>","text":"symbolchain.Cipher.AesGcmCipher.__init__ <p>Creates a cipher around an aes shared key.</p>"},{"location":"devbook/reference/py/Cipher/#symbolchain.Cipher.AesGcmCipher.decrypt","title":"<code>decrypt(cipher_text, iv)</code>","text":"symbolchain.Cipher.AesGcmCipher.decrypt <p>Decrypts cipher text with appended tag.</p>"},{"location":"devbook/reference/py/Cipher/#symbolchain.Cipher.AesGcmCipher.encrypt","title":"<code>encrypt(clear_text, iv)</code>","text":"symbolchain.Cipher.AesGcmCipher.encrypt <p>Encrypts clear text and appends tag to encrypted payload.</p>"},{"location":"devbook/reference/py/CodeWordsEncoder/","title":"CodeWordsEncoder","text":""},{"location":"devbook/reference/py/CodeWordsEncoder/#symbolchain.CodeWordsEncoder.CodeWords","title":"<code>CodeWords</code>","text":"symbolchain.CodeWordsEncoder.CodeWords <p>Represents a group of words that encode some binary data.</p>"},{"location":"devbook/reference/py/CodeWordsEncoder/#symbolchain.CodeWordsEncoder.CodeWordsEncoder","title":"<code>CodeWordsEncoder</code>","text":"symbolchain.CodeWordsEncoder.CodeWordsEncoder <p>Encodes and decodes values using wordlists.</p>"},{"location":"devbook/reference/py/CodeWordsEncoder/#symbolchain.CodeWordsEncoder.CodeWordsEncoder.decode_int","title":"<code>decode_int(code_words)</code>","text":"symbolchain.CodeWordsEncoder.CodeWordsEncoder.decode_int <p>Decodes one or more code words into an integer.</p>"},{"location":"devbook/reference/py/CodeWordsEncoder/#symbolchain.CodeWordsEncoder.CodeWordsEncoder.encode_int","title":"<code>encode_int(value)</code>","text":"symbolchain.CodeWordsEncoder.CodeWordsEncoder.encode_int <p>Encodes an integer into one or more code words.</p>"},{"location":"devbook/reference/py/CryptoTypes/","title":"CryptoTypes","text":""},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.Hash256","title":"<code>Hash256</code>","text":"<p>               Bases: <code>ByteArray</code></p> symbolchain.CryptoTypes.Hash256 <p>Represents a 256-bit hash.</p>"},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.Hash256.__init__","title":"<code>__init__(hash256)</code>","text":"symbolchain.CryptoTypes.Hash256.__init__ <p>Creates a hash from bytes or a hex string.</p>"},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.Hash256.zero","title":"<code>zero()</code>  <code>staticmethod</code>","text":"symbolchain.CryptoTypes.Hash256.zero <p>Creates a zeroed hash.</p>"},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.PrivateKey","title":"<code>PrivateKey</code>","text":"<p>               Bases: <code>ByteArray</code></p> symbolchain.CryptoTypes.PrivateKey <p>Represents a private key.</p>"},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.PrivateKey.__init__","title":"<code>__init__(private_key)</code>","text":"symbolchain.CryptoTypes.PrivateKey.__init__ <p>Creates a private key from bytes or a hex string.</p>"},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.PrivateKey.random","title":"<code>random()</code>  <code>staticmethod</code>","text":"symbolchain.CryptoTypes.PrivateKey.random <p>Generates a random private key.</p>"},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.PublicKey","title":"<code>PublicKey</code>","text":"<p>               Bases: <code>ByteArray</code></p> symbolchain.CryptoTypes.PublicKey <p>Represents a public key.</p>"},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.PublicKey.__init__","title":"<code>__init__(public_key)</code>","text":"symbolchain.CryptoTypes.PublicKey.__init__ <p>Creates a public key from bytes or a hex string.</p>"},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.SharedKey256","title":"<code>SharedKey256</code>","text":"<p>               Bases: <code>ByteArray</code></p> symbolchain.CryptoTypes.SharedKey256 <p>Represents 256-bit symmetric encryption key.</p>"},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.SharedKey256.__init__","title":"<code>__init__(key)</code>","text":"symbolchain.CryptoTypes.SharedKey256.__init__ <p>Creates a key from bytes or a hex string.</p>"},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.Signature","title":"<code>Signature</code>","text":"<p>               Bases: <code>ByteArray</code></p> symbolchain.CryptoTypes.Signature <p>Represents a signature.</p>"},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.Signature.__init__","title":"<code>__init__(signature)</code>","text":"symbolchain.CryptoTypes.Signature.__init__ <p>Creates a signature from bytes or a hex string.</p>"},{"location":"devbook/reference/py/CryptoTypes/#symbolchain.CryptoTypes.Signature.zero","title":"<code>zero()</code>  <code>staticmethod</code>","text":"symbolchain.CryptoTypes.Signature.zero <p>Creates a zeroed signature.</p>"},{"location":"devbook/reference/py/DiceMnemonicGenerator/","title":"DiceMnemonicGenerator","text":""},{"location":"devbook/reference/py/DiceMnemonicGenerator/#symbolchain.DiceMnemonicGenerator.DiceMnemonicGenerator","title":"<code>DiceMnemonicGenerator</code>","text":"symbolchain.DiceMnemonicGenerator.DiceMnemonicGenerator <p>Generates BIP39 mnemonics from dice rolls.</p>"},{"location":"devbook/reference/py/DiceMnemonicGenerator/#symbolchain.DiceMnemonicGenerator.DiceMnemonicGenerator.__init__","title":"<code>__init__(num_die_sides=6, mnemonic_language='english')</code>","text":"symbolchain.DiceMnemonicGenerator.DiceMnemonicGenerator.__init__ <p>Creates a generator.</p>"},{"location":"devbook/reference/py/DiceMnemonicGenerator/#symbolchain.DiceMnemonicGenerator.DiceMnemonicGenerator.add_roll","title":"<code>add_roll(value)</code>","text":"symbolchain.DiceMnemonicGenerator.DiceMnemonicGenerator.add_roll <p>Adds a roll.</p>"},{"location":"devbook/reference/py/DiceMnemonicGenerator/#symbolchain.DiceMnemonicGenerator.DiceMnemonicGenerator.frequencies","title":"<code>frequencies()</code>","text":"symbolchain.DiceMnemonicGenerator.DiceMnemonicGenerator.frequencies <p>Gets the number of times each number was rolled.</p>"},{"location":"devbook/reference/py/DiceMnemonicGenerator/#symbolchain.DiceMnemonicGenerator.DiceMnemonicGenerator.to_mnemonic","title":"<code>to_mnemonic(shrink_wrap=False)</code>","text":"symbolchain.DiceMnemonicGenerator.DiceMnemonicGenerator.to_mnemonic <p>Generates a mnemonic by hashing the roll input. Disabling <code>shrink_wrap</code> is the same method used by coldcard wallet.</p>"},{"location":"devbook/reference/py/Network/","title":"Network","text":""},{"location":"devbook/reference/py/Network/#symbolchain.Network.Network","title":"<code>Network</code>","text":"symbolchain.Network.Network <p>Represents a network.</p>"},{"location":"devbook/reference/py/Network/#symbolchain.Network.Network.__init__","title":"<code>__init__(name, identifier, datetime_converter, address_class, network_timestamp_class)</code>","text":"symbolchain.Network.Network.__init__ <p>Creates a new network with the specified properties.</p>"},{"location":"devbook/reference/py/Network/#symbolchain.Network.Network.address_hasher","title":"<code>address_hasher()</code>  <code>abstractmethod</code>","text":"symbolchain.Network.Network.address_hasher <p>Gets the primary hasher to use in the public key to address conversion.</p>"},{"location":"devbook/reference/py/Network/#symbolchain.Network.Network.create_address","title":"<code>create_address(address_without_checksum, checksum)</code>  <code>abstractmethod</code>","text":"symbolchain.Network.Network.create_address <p>Creates an encoded address from an address without checksum and checksum bytes.</p>"},{"location":"devbook/reference/py/Network/#symbolchain.Network.Network.from_datetime","title":"<code>from_datetime(reference_datetime)</code>","text":"symbolchain.Network.Network.from_datetime <p>Converts a datetime to a network timestamp.</p>"},{"location":"devbook/reference/py/Network/#symbolchain.Network.Network.is_valid_address","title":"<code>is_valid_address(address)</code>","text":"symbolchain.Network.Network.is_valid_address <p>Checks if an address is valid and belongs to this network.</p>"},{"location":"devbook/reference/py/Network/#symbolchain.Network.Network.is_valid_address_string","title":"<code>is_valid_address_string(address_string)</code>","text":"symbolchain.Network.Network.is_valid_address_string <p>Checks if an address string is valid and belongs to this network.</p>"},{"location":"devbook/reference/py/Network/#symbolchain.Network.Network.public_key_to_address","title":"<code>public_key_to_address(public_key)</code>","text":"symbolchain.Network.Network.public_key_to_address <p>Converts a public key to an address.</p>"},{"location":"devbook/reference/py/Network/#symbolchain.Network.Network.to_datetime","title":"<code>to_datetime(reference_network_timestamp)</code>","text":"symbolchain.Network.Network.to_datetime <p>Converts a network timestamp to a datetime.</p>"},{"location":"devbook/reference/py/Network/#symbolchain.Network.NetworkLocator","title":"<code>NetworkLocator</code>","text":"symbolchain.Network.NetworkLocator <p>Provides utility functions for finding a network.</p>"},{"location":"devbook/reference/py/Network/#symbolchain.Network.NetworkLocator.find_by_identifier","title":"<code>find_by_identifier(networks, identifiers)</code>  <code>staticmethod</code>","text":"symbolchain.Network.NetworkLocator.find_by_identifier <p>Finds a network with a specified identifier within a list of networks.</p>"},{"location":"devbook/reference/py/Network/#symbolchain.Network.NetworkLocator.find_by_name","title":"<code>find_by_name(networks, names)</code>  <code>staticmethod</code>","text":"symbolchain.Network.NetworkLocator.find_by_name <p>Finds a network with a specified name within a list of networks.</p>"},{"location":"devbook/reference/py/NetworkTimestamp/","title":"NetworkTimestamp","text":""},{"location":"devbook/reference/py/NetworkTimestamp/#symbolchain.NetworkTimestamp.NetworkTimestamp","title":"<code>NetworkTimestamp</code>","text":"symbolchain.NetworkTimestamp.NetworkTimestamp <p>Represents a network timestamp.</p>"},{"location":"devbook/reference/py/NetworkTimestamp/#symbolchain.NetworkTimestamp.NetworkTimestamp.is_epochal","title":"<code>is_epochal</code>  <code>property</code>","text":"<p>Determines if this is the epochal timestamp.</p>"},{"location":"devbook/reference/py/NetworkTimestamp/#symbolchain.NetworkTimestamp.NetworkTimestamp.__init__","title":"<code>__init__(timestamp)</code>","text":"symbolchain.NetworkTimestamp.NetworkTimestamp.__init__ <p>Creates a timestamp.</p>"},{"location":"devbook/reference/py/NetworkTimestamp/#symbolchain.NetworkTimestamp.NetworkTimestamp.add_hours","title":"<code>add_hours(count)</code>","text":"symbolchain.NetworkTimestamp.NetworkTimestamp.add_hours <p>Adds a specified number of hours to this timestamp.</p>"},{"location":"devbook/reference/py/NetworkTimestamp/#symbolchain.NetworkTimestamp.NetworkTimestamp.add_minutes","title":"<code>add_minutes(count)</code>","text":"symbolchain.NetworkTimestamp.NetworkTimestamp.add_minutes <p>Adds a specified number of minutes to this timestamp.</p>"},{"location":"devbook/reference/py/NetworkTimestamp/#symbolchain.NetworkTimestamp.NetworkTimestamp.add_seconds","title":"<code>add_seconds(count)</code>  <code>abstractmethod</code>","text":"symbolchain.NetworkTimestamp.NetworkTimestamp.add_seconds <p>Adds a specified number of seconds to this timestamp.</p>"},{"location":"devbook/reference/py/NetworkTimestamp/#symbolchain.NetworkTimestamp.NetworkTimestampDatetimeConverter","title":"<code>NetworkTimestampDatetimeConverter</code>","text":"symbolchain.NetworkTimestamp.NetworkTimestampDatetimeConverter <p>Provides utilities for converting between network timestamps and datetimes.</p>"},{"location":"devbook/reference/py/NetworkTimestamp/#symbolchain.NetworkTimestamp.NetworkTimestampDatetimeConverter.__init__","title":"<code>__init__(epoch, time_units)</code>","text":"symbolchain.NetworkTimestamp.NetworkTimestampDatetimeConverter.__init__ <p>Creates a converter given an epoch and base time units.</p>"},{"location":"devbook/reference/py/NetworkTimestamp/#symbolchain.NetworkTimestamp.NetworkTimestampDatetimeConverter.to_datetime","title":"<code>to_datetime(raw_timestamp)</code>","text":"symbolchain.NetworkTimestamp.NetworkTimestampDatetimeConverter.to_datetime <p>Converts a network timestamp to a datetime.</p>"},{"location":"devbook/reference/py/NetworkTimestamp/#symbolchain.NetworkTimestamp.NetworkTimestampDatetimeConverter.to_difference","title":"<code>to_difference(reference_datetime)</code>","text":"symbolchain.NetworkTimestamp.NetworkTimestampDatetimeConverter.to_difference <p>Subtracts the network epoch from the reference date.</p>"},{"location":"devbook/reference/py/NodeDescriptorRepository/","title":"NodeDescriptorRepository","text":""},{"location":"devbook/reference/py/NodeDescriptorRepository/#symbolchain.NodeDescriptorRepository.NodeDescriptor","title":"<code>NodeDescriptor</code>","text":"symbolchain.NodeDescriptorRepository.NodeDescriptor <p>Represents a node.</p>"},{"location":"devbook/reference/py/NodeDescriptorRepository/#symbolchain.NodeDescriptorRepository.NodeDescriptor.__init__","title":"<code>__init__(descriptor_yaml)</code>","text":"symbolchain.NodeDescriptorRepository.NodeDescriptor.__init__ <p>Creates a descriptor from a yaml container.</p>"},{"location":"devbook/reference/py/NodeDescriptorRepository/#symbolchain.NodeDescriptorRepository.NodeDescriptorRepository","title":"<code>NodeDescriptorRepository</code>","text":"symbolchain.NodeDescriptorRepository.NodeDescriptorRepository <p>Loads read-only node descriptors from YAML.</p>"},{"location":"devbook/reference/py/NodeDescriptorRepository/#symbolchain.NodeDescriptorRepository.NodeDescriptorRepository.__init__","title":"<code>__init__(yaml_input)</code>","text":"symbolchain.NodeDescriptorRepository.NodeDescriptorRepository.__init__ <p>Loads node descriptors from the specified input.</p>"},{"location":"devbook/reference/py/NodeDescriptorRepository/#symbolchain.NodeDescriptorRepository.NodeDescriptorRepository.find_all_by_role","title":"<code>find_all_by_role(role)</code>","text":"symbolchain.NodeDescriptorRepository.NodeDescriptorRepository.find_all_by_role <p>Finds all node descriptors with a matching role.</p>"},{"location":"devbook/reference/py/NodeDescriptorRepository/#symbolchain.NodeDescriptorRepository.NodeDescriptorRepository.find_all_not_by_role","title":"<code>find_all_not_by_role(role)</code>","text":"symbolchain.NodeDescriptorRepository.NodeDescriptorRepository.find_all_not_by_role <p>Finds all node descriptors without a matching role.</p>"},{"location":"devbook/reference/py/Ordered/","title":"Ordered","text":""},{"location":"devbook/reference/py/PrivateKeyStorage/","title":"PrivateKeyStorage","text":""},{"location":"devbook/reference/py/PrivateKeyStorage/#symbolchain.PrivateKeyStorage.PrivateKeyStorage","title":"<code>PrivateKeyStorage</code>","text":"symbolchain.PrivateKeyStorage.PrivateKeyStorage <p>Loads and saves private keys as PEM files with optional encryption in a directory.</p>"},{"location":"devbook/reference/py/PrivateKeyStorage/#symbolchain.PrivateKeyStorage.PrivateKeyStorage.__init__","title":"<code>__init__(directory, password=None)</code>","text":"symbolchain.PrivateKeyStorage.PrivateKeyStorage.__init__ <p>Creates storage for a directory.</p>"},{"location":"devbook/reference/py/PrivateKeyStorage/#symbolchain.PrivateKeyStorage.PrivateKeyStorage.load","title":"<code>load(name)</code>","text":"symbolchain.PrivateKeyStorage.PrivateKeyStorage.load <p>Loads a private key with the specified name.</p>"},{"location":"devbook/reference/py/PrivateKeyStorage/#symbolchain.PrivateKeyStorage.PrivateKeyStorage.save","title":"<code>save(name, private_key)</code>","text":"symbolchain.PrivateKeyStorage.PrivateKeyStorage.save <p>Saves a private key with the specified name.</p>"},{"location":"devbook/reference/py/QrSignatureStorage/","title":"QrSignatureStorage","text":""},{"location":"devbook/reference/py/QrSignatureStorage/#symbolchain.QrSignatureStorage.QrSignatureStorage","title":"<code>QrSignatureStorage</code>","text":"symbolchain.QrSignatureStorage.QrSignatureStorage <p>Loads and saves signatures as QR codes in a directory.</p>"},{"location":"devbook/reference/py/QrSignatureStorage/#symbolchain.QrSignatureStorage.QrSignatureStorage.__init__","title":"<code>__init__(directory)</code>","text":"symbolchain.QrSignatureStorage.QrSignatureStorage.__init__ <p>Creates storage for a directory.</p>"},{"location":"devbook/reference/py/QrSignatureStorage/#symbolchain.QrSignatureStorage.QrSignatureStorage.load","title":"<code>load(name)</code>","text":"symbolchain.QrSignatureStorage.QrSignatureStorage.load <p>Loads a transaction hash along with attesting signatures.</p>"},{"location":"devbook/reference/py/QrSignatureStorage/#symbolchain.QrSignatureStorage.QrSignatureStorage.save","title":"<code>save(name, transaction_hash, signatures)</code>","text":"symbolchain.QrSignatureStorage.QrSignatureStorage.save <p>Saves a transaction hash along with attesting signatures.</p>"},{"location":"devbook/reference/py/QrStorage/","title":"QrStorage","text":""},{"location":"devbook/reference/py/QrStorage/#symbolchain.QrStorage.QrStorage","title":"<code>QrStorage</code>","text":"symbolchain.QrStorage.QrStorage <p>Loads and saves binary data as QR codes in a directory.</p>"},{"location":"devbook/reference/py/QrStorage/#symbolchain.QrStorage.QrStorage.__init__","title":"<code>__init__(directory)</code>","text":"symbolchain.QrStorage.QrStorage.__init__ <p>Creates storage for a directory.</p>"},{"location":"devbook/reference/py/QrStorage/#symbolchain.QrStorage.QrStorage.load","title":"<code>load(name)</code>","text":"symbolchain.QrStorage.QrStorage.load <p>Loads a buffer.</p>"},{"location":"devbook/reference/py/QrStorage/#symbolchain.QrStorage.QrStorage.save","title":"<code>save(name, buffer)</code>","text":"symbolchain.QrStorage.QrStorage.save <p>Saves a buffer.</p>"},{"location":"devbook/reference/py/RuleBasedTransactionFactory/","title":"RuleBasedTransactionFactory","text":""},{"location":"devbook/reference/py/RuleBasedTransactionFactory/#symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory","title":"<code>RuleBasedTransactionFactory</code>","text":"symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory <p>Rule based transaction factory.</p>"},{"location":"devbook/reference/py/RuleBasedTransactionFactory/#symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.__init__","title":"<code>__init__(module, type_converter=None, type_rule_overrides=None)</code>","text":"symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.__init__ <p>Creates a rule based transaction factory for use with catbuffer generated code.</p>"},{"location":"devbook/reference/py/RuleBasedTransactionFactory/#symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.add_array_parser","title":"<code>add_array_parser(name)</code>","text":"symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.add_array_parser <p>Creates array type parser, based on some existing element type parser.</p>"},{"location":"devbook/reference/py/RuleBasedTransactionFactory/#symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.add_enum_parser","title":"<code>add_enum_parser(name)</code>","text":"symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.add_enum_parser <p>Creates enum type parser.</p>"},{"location":"devbook/reference/py/RuleBasedTransactionFactory/#symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.add_flags_parser","title":"<code>add_flags_parser(name)</code>","text":"symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.add_flags_parser <p>Creates flag type parser.</p>"},{"location":"devbook/reference/py/RuleBasedTransactionFactory/#symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.add_pod_parser","title":"<code>add_pod_parser(name, pod_class)</code>","text":"symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.add_pod_parser <p>Creates wrapper for SDK POD types.</p>"},{"location":"devbook/reference/py/RuleBasedTransactionFactory/#symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.add_struct_parser","title":"<code>add_struct_parser(name)</code>","text":"symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.add_struct_parser <p>Creates struct parser (to allow nested parsing).</p>"},{"location":"devbook/reference/py/RuleBasedTransactionFactory/#symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.autodetect","title":"<code>autodetect()</code>","text":"symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.autodetect <p>Autodetects rules using reflection.</p>"},{"location":"devbook/reference/py/RuleBasedTransactionFactory/#symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.create_from_factory","title":"<code>create_from_factory(factory, descriptor)</code>","text":"symbolchain.RuleBasedTransactionFactory.RuleBasedTransactionFactory.create_from_factory <p>Creates an entity from a descriptor using a factory.</p>"},{"location":"devbook/reference/py/SharedKey/","title":"SharedKey","text":""},{"location":"devbook/reference/py/TransactionDescriptorProcessor/","title":"TransactionDescriptorProcessor","text":""},{"location":"devbook/reference/py/TransactionDescriptorProcessor/#symbolchain.TransactionDescriptorProcessor.TransactionDescriptorProcessor","title":"<code>TransactionDescriptorProcessor</code>","text":"symbolchain.TransactionDescriptorProcessor.TransactionDescriptorProcessor <p>Processes and looks up transaction descriptor properties.</p>"},{"location":"devbook/reference/py/TransactionDescriptorProcessor/#symbolchain.TransactionDescriptorProcessor.TransactionDescriptorProcessor.__init__","title":"<code>__init__(transaction_descriptor, type_parsing_rules, type_converter=None)</code>","text":"symbolchain.TransactionDescriptorProcessor.TransactionDescriptorProcessor.__init__ <p>Creates a transaction descriptor processor.</p>"},{"location":"devbook/reference/py/TransactionDescriptorProcessor/#symbolchain.TransactionDescriptorProcessor.TransactionDescriptorProcessor.copy_to","title":"<code>copy_to(transaction, ignore_keys=None)</code>","text":"symbolchain.TransactionDescriptorProcessor.TransactionDescriptorProcessor.copy_to <p>Copies all descriptor information to a transaction.</p>"},{"location":"devbook/reference/py/TransactionDescriptorProcessor/#symbolchain.TransactionDescriptorProcessor.TransactionDescriptorProcessor.lookup_value","title":"<code>lookup_value(key)</code>","text":"symbolchain.TransactionDescriptorProcessor.TransactionDescriptorProcessor.lookup_value <p>Looks up the value for key.</p>"},{"location":"devbook/reference/py/TransactionDescriptorProcessor/#symbolchain.TransactionDescriptorProcessor.TransactionDescriptorProcessor.set_type_hints","title":"<code>set_type_hints(type_hints)</code>","text":"symbolchain.TransactionDescriptorProcessor.TransactionDescriptorProcessor.set_type_hints <p>Sets type hints.</p>"},{"location":"devbook/reference/py/Transforms/","title":"Transforms","text":""},{"location":"devbook/reference/py/Transforms/#symbolchain.Transforms.ripemd_keccak_256","title":"<code>ripemd_keccak_256(payload)</code>","text":"symbolchain.Transforms.ripemd_keccak_256 <p>Hashes payload with keccak 256 and then hashes the result with ripemd160.</p>"},{"location":"devbook/reference/py/__init__/","title":"init","text":""},{"location":"devbook/reference/py/navigation/","title":"Navigation","text":"<ul> <li>symbolchain<ul> <li>AccountDescriptorRepository</li> <li>ArrayHelpers</li> <li>BaseValue</li> <li>Bip32</li> <li>BlockchainSettings</li> <li>BufferReader</li> <li>BufferWriter</li> <li>ByteArray</li> <li>Cipher</li> <li>CodeWordsEncoder</li> <li>CryptoTypes</li> <li>DiceMnemonicGenerator</li> <li>external<ul> <li>ed25519</li> </ul> </li> <li>facade<ul> <li>BatchOperations</li> <li>NemFacade</li> <li>SymbolFacade</li> </ul> </li> <li>impl<ul> <li>CipherHelpers</li> </ul> </li> <li>nc</li> <li>nem<ul> <li>KeyPair</li> <li>MessageEncoder</li> <li>Network</li> <li>SharedKey</li> <li>TransactionFactory</li> </ul> </li> <li>Network</li> <li>NetworkTimestamp</li> <li>NodeDescriptorRepository</li> <li>Ordered</li> <li>PrivateKeyStorage</li> <li>QrSignatureStorage</li> <li>QrStorage</li> <li>ripemd160</li> <li>RuleBasedTransactionFactory</li> <li>sc</li> <li>SharedKey</li> <li>symbol<ul> <li>IdGenerator</li> <li>KeyPair</li> <li>Merkle</li> <li>MessageEncoder</li> <li>Metadata</li> <li>Network</li> <li>SharedKey</li> <li>TransactionFactory</li> <li>VotingKeysGenerator</li> </ul> </li> <li>TransactionDescriptorProcessor</li> <li>Transforms</li> </ul> </li> </ul>"},{"location":"devbook/reference/py/ripemd160/","title":"ripemd160","text":""},{"location":"devbook/reference/py/ripemd160/#symbolchain.ripemd160.ripemd160","title":"<code>ripemd160(data)</code>","text":"symbolchain.ripemd160.ripemd160 <p>Calculates RIPEMD-160 hash of data.</p>"},{"location":"devbook/reference/py/external/__init__/","title":"init","text":""},{"location":"devbook/reference/py/external/ed25519/","title":"ed25519","text":"<p>NB: This code is not safe for use with secret keys or secret data. The only safe use of this code is for verifying signatures on public messages.</p> <p>Functions for computing the public key of a secret key and for signing a message are included, namely publickey_unsafe and signature_unsafe, for testing purposes only.</p> <p>The root of the problem is that Python's long-integer arithmetic is not designed for use in cryptography.  Specifically, it may take more or less time to execute an operation depending on the values of the inputs, and its memory access patterns may also depend on the inputs. This opens it to timing and cache side-channel attacks which can disclose data to an attacker.  We rely on Python's long-integer arithmetic, so we cannot handle secrets without risking their disclosure.</p>"},{"location":"devbook/reference/py/external/ed25519/#symbolchain.external.ed25519.checkvalid_hash","title":"<code>checkvalid_hash(s, m, pk, hashobj=hashlib.sha512)</code>","text":"symbolchain.external.ed25519.checkvalid_hash <p>Not safe to use when any argument is secret.</p> <p>See module docstring.  This function should be used only for verifying public signatures of public messages.</p>"},{"location":"devbook/reference/py/external/ed25519/#symbolchain.external.ed25519.derive_shared_secret_unsafe","title":"<code>derive_shared_secret_unsafe(pk, sk, hashobj=hashlib.sha512)</code>","text":"symbolchain.external.ed25519.derive_shared_secret_unsafe <p>Not safe to use with secret keys or secret data.</p> <p>See module docstring.  This function should be used for testing only.</p>"},{"location":"devbook/reference/py/external/ed25519/#symbolchain.external.ed25519.inv","title":"<code>inv(z)</code>","text":"symbolchain.external.ed25519.inv <p>$= z^{-1} \\mod q$, for z != 0</p>"},{"location":"devbook/reference/py/external/ed25519/#symbolchain.external.ed25519.iscanonical","title":"<code>iscanonical(s)</code>","text":"symbolchain.external.ed25519.iscanonical <p>public key s is canonical if y coordinate is smaller than prime <code>q</code>.</p>"},{"location":"devbook/reference/py/external/ed25519/#symbolchain.external.ed25519.isinmainsubgroup","title":"<code>isinmainsubgroup(P)</code>","text":"symbolchain.external.ed25519.isinmainsubgroup <p>checks if point P is in main subgroup.</p>"},{"location":"devbook/reference/py/external/ed25519/#symbolchain.external.ed25519.pow2","title":"<code>pow2(x, p)</code>","text":"symbolchain.external.ed25519.pow2 <p>== pow(x, 2**p, q)</p>"},{"location":"devbook/reference/py/external/ed25519/#symbolchain.external.ed25519.publickey_hash_unsafe","title":"<code>publickey_hash_unsafe(sk, hashobj=hashlib.sha512)</code>","text":"symbolchain.external.ed25519.publickey_hash_unsafe <p>Not safe to use with secret keys or secret data.</p> <p>See module docstring.  This function should be used for testing only.</p>"},{"location":"devbook/reference/py/external/ed25519/#symbolchain.external.ed25519.scalarmult_B","title":"<code>scalarmult_B(e)</code>","text":"symbolchain.external.ed25519.scalarmult_B <p>Implements scalarmult(B, e) more efficiently.</p>"},{"location":"devbook/reference/py/external/ed25519/#symbolchain.external.ed25519.signature_hash_unsafe","title":"<code>signature_hash_unsafe(m, sk, pk, hashobj=hashlib.sha512)</code>","text":"symbolchain.external.ed25519.signature_hash_unsafe <p>Not safe to use with secret keys or secret data.</p> <p>See module docstring.  This function should be used for testing only.</p>"},{"location":"devbook/reference/py/facade/BatchOperations/","title":"BatchOperations","text":""},{"location":"devbook/reference/py/facade/BatchOperations/#symbolchain.facade.BatchOperations.BatchOperations","title":"<code>BatchOperations</code>","text":"symbolchain.facade.BatchOperations.BatchOperations <p>Provides facade-based batch operations.</p>"},{"location":"devbook/reference/py/facade/BatchOperations/#symbolchain.facade.BatchOperations.BatchOperations.PrepareError","title":"<code>PrepareError</code>","text":"<p>               Bases: <code>Exception</code></p> symbolchain.facade.BatchOperations.BatchOperations.PrepareError <p>Error that is thrown when a batch prepare operation fails.</p>"},{"location":"devbook/reference/py/facade/BatchOperations/#symbolchain.facade.BatchOperations.BatchOperations.PrepareError.__init__","title":"<code>__init__(message)</code>","text":"symbolchain.facade.BatchOperations.BatchOperations.PrepareError.__init__ <p>Creates a new error.</p>"},{"location":"devbook/reference/py/facade/BatchOperations/#symbolchain.facade.BatchOperations.BatchOperations.__init__","title":"<code>__init__(facade, output_file_prefix='')</code>","text":"symbolchain.facade.BatchOperations.BatchOperations.__init__ <p>Creates batch operations around the specified facade.</p>"},{"location":"devbook/reference/py/facade/BatchOperations/#symbolchain.facade.BatchOperations.BatchOperations.load_all","title":"<code>load_all(transactions_yaml_input)</code>","text":"symbolchain.facade.BatchOperations.BatchOperations.load_all <p>Loads all transactions from YAML.</p>"},{"location":"devbook/reference/py/facade/BatchOperations/#symbolchain.facade.BatchOperations.BatchOperations.prepare_all","title":"<code>prepare_all(transactions, signature_storage, output_directory)</code>","text":"symbolchain.facade.BatchOperations.BatchOperations.prepare_all <p>Prepares multiple transactions by attaching signatures to each and producing files that can be sent to the network.</p>"},{"location":"devbook/reference/py/facade/BatchOperations/#symbolchain.facade.BatchOperations.BatchOperations.sign_all","title":"<code>sign_all(transactions, private_key_storage, signature_storage)</code>","text":"symbolchain.facade.BatchOperations.BatchOperations.sign_all <p>Signs multiple transactions and saves the signatures as multiple qrcodes.</p>"},{"location":"devbook/reference/py/facade/NemFacade/","title":"NemFacade","text":""},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemAccount","title":"<code>NemAccount</code>","text":"<p>               Bases: <code>NemPublicAccount</code></p> symbolchain.facade.NemFacade.NemAccount <p>NEM account.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemAccount.__init__","title":"<code>__init__(facade, key_pair)</code>","text":"symbolchain.facade.NemFacade.NemAccount.__init__ <p>Creates a NEM account.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemAccount.message_encoder","title":"<code>message_encoder()</code>","text":"symbolchain.facade.NemFacade.NemAccount.message_encoder <p>Creates a message encoder that can be used for encrypting and encoding messages between two parties.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemAccount.sign_transaction","title":"<code>sign_transaction(transaction)</code>","text":"symbolchain.facade.NemFacade.NemAccount.sign_transaction <p>Signs a NEM transaction.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemFacade","title":"<code>NemFacade</code>","text":"symbolchain.facade.NemFacade.NemFacade <p>Facade used to interact with NEM blockchain.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemFacade.__init__","title":"<code>__init__(network, account_descriptor_repository=None)</code>","text":"symbolchain.facade.NemFacade.NemFacade.__init__ <p>Creates a NEM facade.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemFacade.bip32_node_to_key_pair","title":"<code>bip32_node_to_key_pair(bip32_node)</code>  <code>staticmethod</code>","text":"symbolchain.facade.NemFacade.NemFacade.bip32_node_to_key_pair <p>Derives a NEM KeyPair from a BIP32 node.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemFacade.bip32_path","title":"<code>bip32_path(account_id)</code>","text":"symbolchain.facade.NemFacade.NemFacade.bip32_path <p>Creates a network compatible BIP32 path for the specified account.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemFacade.create_account","title":"<code>create_account(private_key)</code>","text":"symbolchain.facade.NemFacade.NemFacade.create_account <p>Creates a NEM account from a private key.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemFacade.create_public_account","title":"<code>create_public_account(public_key)</code>","text":"symbolchain.facade.NemFacade.NemFacade.create_public_account <p>Creates a NEM public account from a public key.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemFacade.extract_signing_payload","title":"<code>extract_signing_payload(transaction)</code>  <code>staticmethod</code>","text":"symbolchain.facade.NemFacade.NemFacade.extract_signing_payload <p>Gets the payload to sign given a NEM transaction.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemFacade.hash_transaction","title":"<code>hash_transaction(transaction)</code>  <code>staticmethod</code>","text":"symbolchain.facade.NemFacade.NemFacade.hash_transaction <p>Hashes a NEM transaction.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemFacade.now","title":"<code>now()</code>","text":"symbolchain.facade.NemFacade.NemFacade.now <p>Creates a network timestamp representing the current time.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemFacade.sign_transaction","title":"<code>sign_transaction(key_pair, transaction)</code>","text":"symbolchain.facade.NemFacade.NemFacade.sign_transaction <p>Signs a NEM transaction.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemFacade.verify_transaction","title":"<code>verify_transaction(transaction, signature)</code>","text":"symbolchain.facade.NemFacade.NemFacade.verify_transaction <p>Verifies a NEM transaction.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemPublicAccount","title":"<code>NemPublicAccount</code>","text":"symbolchain.facade.NemFacade.NemPublicAccount <p>NEM public account.</p>"},{"location":"devbook/reference/py/facade/NemFacade/#symbolchain.facade.NemFacade.NemPublicAccount.__init__","title":"<code>__init__(facade, public_key)</code>","text":"symbolchain.facade.NemFacade.NemPublicAccount.__init__ <p>Creates a NEM public account.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/","title":"SymbolFacade","text":""},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolAccount","title":"<code>SymbolAccount</code>","text":"<p>               Bases: <code>SymbolPublicAccount</code></p> symbolchain.facade.SymbolFacade.SymbolAccount <p>Symbol account.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolAccount.__init__","title":"<code>__init__(facade, key_pair)</code>","text":"symbolchain.facade.SymbolFacade.SymbolAccount.__init__ <p>Creates a Symbol account.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolAccount.cosign_transaction","title":"<code>cosign_transaction(transaction, detached=False)</code>","text":"symbolchain.facade.SymbolFacade.SymbolAccount.cosign_transaction <p>Cosigns a Symbol transaction.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolAccount.cosign_transaction_hash","title":"<code>cosign_transaction_hash(transaction_hash, detached=False)</code>","text":"symbolchain.facade.SymbolFacade.SymbolAccount.cosign_transaction_hash <p>Cosigns a Symbol transaction hash.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolAccount.message_encoder","title":"<code>message_encoder()</code>","text":"symbolchain.facade.SymbolFacade.SymbolAccount.message_encoder <p>Creates a message encoder that can be used for encrypting and encoding messages between two parties.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolAccount.sign_transaction","title":"<code>sign_transaction(transaction)</code>","text":"symbolchain.facade.SymbolFacade.SymbolAccount.sign_transaction <p>Signs a Symbol transaction.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade","title":"<code>SymbolFacade</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade <p>Facade used to interact with Symbol blockchain.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.__init__","title":"<code>__init__(network, account_descriptor_repository=None)</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.__init__ <p>Creates a Symbol facade.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.bip32_node_to_key_pair","title":"<code>bip32_node_to_key_pair(bip32_node)</code>  <code>staticmethod</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.bip32_node_to_key_pair <p>Derives a Symbol KeyPair from a BIP32 node.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.bip32_path","title":"<code>bip32_path(account_id)</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.bip32_path <p>Creates a network compatible BIP32 path for the specified account.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.cosign_transaction","title":"<code>cosign_transaction(key_pair, transaction, detached=False)</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.cosign_transaction <p>Cosigns a Symbol transaction.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.cosign_transaction_hash","title":"<code>cosign_transaction_hash(key_pair, transaction_hash, detached=False)</code>  <code>staticmethod</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.cosign_transaction_hash <p>Cosigns a Symbol transaction hash.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.create_account","title":"<code>create_account(private_key)</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.create_account <p>Creates a Symbol account from a private key.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.create_public_account","title":"<code>create_public_account(public_key)</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.create_public_account <p>Creates a Symbol public account from a public key.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.extract_signing_payload","title":"<code>extract_signing_payload(transaction)</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.extract_signing_payload <p>Gets the payload to sign given a Symbol transaction.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.hash_embedded_transactions","title":"<code>hash_embedded_transactions(embedded_transactions)</code>  <code>staticmethod</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.hash_embedded_transactions <p>Hashes embedded transactions of an aggregate.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.hash_transaction","title":"<code>hash_transaction(transaction)</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.hash_transaction <p>Hashes a Symbol transaction.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.now","title":"<code>now()</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.now <p>Creates a network timestamp representing the current time.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.sign_transaction","title":"<code>sign_transaction(key_pair, transaction)</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.sign_transaction <p>Signs a Symbol transaction.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolFacade.verify_transaction","title":"<code>verify_transaction(transaction, signature)</code>","text":"symbolchain.facade.SymbolFacade.SymbolFacade.verify_transaction <p>Verifies a Symbol transaction.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolPublicAccount","title":"<code>SymbolPublicAccount</code>","text":"symbolchain.facade.SymbolFacade.SymbolPublicAccount <p>Symbol public account.</p>"},{"location":"devbook/reference/py/facade/SymbolFacade/#symbolchain.facade.SymbolFacade.SymbolPublicAccount.__init__","title":"<code>__init__(facade, public_key)</code>","text":"symbolchain.facade.SymbolFacade.SymbolPublicAccount.__init__ <p>Creates a Symbol public account.</p>"},{"location":"devbook/reference/py/facade/__init__/","title":"init","text":""},{"location":"devbook/reference/py/impl/CipherHelpers/","title":"CipherHelpers","text":""},{"location":"devbook/reference/py/impl/__init__/","title":"init","text":""},{"location":"devbook/reference/py/nc/__init__/","title":"nc","text":""},{"location":"devbook/reference/py/nem/KeyPair/","title":"KeyPair","text":""},{"location":"devbook/reference/py/nem/KeyPair/#symbolchain.nem.KeyPair.KeyPair","title":"<code>KeyPair</code>","text":"symbolchain.nem.KeyPair.KeyPair <p>Represents an ED25519 private and public key.</p>"},{"location":"devbook/reference/py/nem/KeyPair/#symbolchain.nem.KeyPair.KeyPair.private_key","title":"<code>private_key</code>  <code>property</code>","text":"<p>Gets the private key.</p>"},{"location":"devbook/reference/py/nem/KeyPair/#symbolchain.nem.KeyPair.KeyPair.public_key","title":"<code>public_key</code>  <code>property</code>","text":"<p>Gets the public key.</p>"},{"location":"devbook/reference/py/nem/KeyPair/#symbolchain.nem.KeyPair.KeyPair.__init__","title":"<code>__init__(private_key)</code>","text":"symbolchain.nem.KeyPair.KeyPair.__init__ <p>Creates a key pair from a private key.</p>"},{"location":"devbook/reference/py/nem/KeyPair/#symbolchain.nem.KeyPair.KeyPair.sign","title":"<code>sign(message)</code>","text":"symbolchain.nem.KeyPair.KeyPair.sign <p>Signs a message with the private key.</p>"},{"location":"devbook/reference/py/nem/KeyPair/#symbolchain.nem.KeyPair.Verifier","title":"<code>Verifier</code>","text":"symbolchain.nem.KeyPair.Verifier <p>Verifies signatures signed by a single key pair.</p>"},{"location":"devbook/reference/py/nem/KeyPair/#symbolchain.nem.KeyPair.Verifier.__init__","title":"<code>__init__(public_key)</code>","text":"symbolchain.nem.KeyPair.Verifier.__init__ <p>Creates a verifier from a public key.</p>"},{"location":"devbook/reference/py/nem/KeyPair/#symbolchain.nem.KeyPair.Verifier.verify","title":"<code>verify(message, signature)</code>","text":"symbolchain.nem.KeyPair.Verifier.verify <p>Verifies a message signature.</p>"},{"location":"devbook/reference/py/nem/MessageEncoder/","title":"MessageEncoder","text":""},{"location":"devbook/reference/py/nem/MessageEncoder/#symbolchain.nem.MessageEncoder.MessageEncoder","title":"<code>MessageEncoder</code>","text":"symbolchain.nem.MessageEncoder.MessageEncoder <p>Encrypts and encodes messages between two parties.</p>"},{"location":"devbook/reference/py/nem/MessageEncoder/#symbolchain.nem.MessageEncoder.MessageEncoder.public_key","title":"<code>public_key</code>  <code>property</code>","text":"<p>Public key used for message encoding.</p>"},{"location":"devbook/reference/py/nem/MessageEncoder/#symbolchain.nem.MessageEncoder.MessageEncoder.__init__","title":"<code>__init__(key_pair)</code>","text":"symbolchain.nem.MessageEncoder.MessageEncoder.__init__ <p>Creates message encoder around key pair.</p>"},{"location":"devbook/reference/py/nem/MessageEncoder/#symbolchain.nem.MessageEncoder.MessageEncoder.encode","title":"<code>encode(recipient_public_key, message)</code>","text":"symbolchain.nem.MessageEncoder.MessageEncoder.encode <p>Encodes message to recipient using recommended format.</p>"},{"location":"devbook/reference/py/nem/MessageEncoder/#symbolchain.nem.MessageEncoder.MessageEncoder.encode_deprecated","title":"<code>encode_deprecated(recipient_public_key, message)</code>","text":"symbolchain.nem.MessageEncoder.MessageEncoder.encode_deprecated <p>Encodes message to recipient using deprecated encryption and key derivation.</p>"},{"location":"devbook/reference/py/nem/MessageEncoder/#symbolchain.nem.MessageEncoder.MessageEncoder.try_decode","title":"<code>try_decode(recipient_public_key, encoded_message)</code>","text":"symbolchain.nem.MessageEncoder.MessageEncoder.try_decode <p>Tries to decode encoded message, returns tuple: * True, message - if message has been decoded and decrypted * False, encoded_message - otherwise</p>"},{"location":"devbook/reference/py/nem/Network/","title":"Network","text":""},{"location":"devbook/reference/py/nem/Network/#symbolchain.nem.Network.Address","title":"<code>Address</code>","text":"<p>               Bases: <code>ByteArray</code></p> symbolchain.nem.Network.Address <p>Represents a nem address.</p>"},{"location":"devbook/reference/py/nem/Network/#symbolchain.nem.Network.Address.__init__","title":"<code>__init__(address)</code>","text":"symbolchain.nem.Network.Address.__init__ <p>Creates an address from a decoded or encoded address.</p>"},{"location":"devbook/reference/py/nem/Network/#symbolchain.nem.Network.Network","title":"<code>Network</code>","text":"<p>               Bases: <code>Network</code></p> symbolchain.nem.Network.Network <p>Represents a nem network.</p>"},{"location":"devbook/reference/py/nem/Network/#symbolchain.nem.Network.Network.__init__","title":"<code>__init__(name, identifier, epoch_time)</code>","text":"symbolchain.nem.Network.Network.__init__ <p>Creates a new network with the specified properties.</p>"},{"location":"devbook/reference/py/nem/Network/#symbolchain.nem.Network.NetworkTimestamp","title":"<code>NetworkTimestamp</code>","text":"<p>               Bases: <code>NetworkTimestamp</code></p> symbolchain.nem.Network.NetworkTimestamp <p>Represents a nem network timestamp with second resolution.</p>"},{"location":"devbook/reference/py/nem/SharedKey/","title":"SharedKey","text":""},{"location":"devbook/reference/py/nem/SharedKey/#symbolchain.nem.SharedKey.SharedKey","title":"<code>SharedKey</code>","text":"<p>               Bases: <code>SharedKey</code></p> symbolchain.nem.SharedKey.SharedKey"},{"location":"devbook/reference/py/nem/SharedKey/#symbolchain.nem.SharedKey.SharedKey.derive_shared_key","title":"<code>derive_shared_key(key_pair, other_public_key)</code>  <code>staticmethod</code>","text":"symbolchain.nem.SharedKey.SharedKey.derive_shared_key <p>Derives shared encryption key from private key and public key.</p>"},{"location":"devbook/reference/py/nem/SharedKey/#symbolchain.nem.SharedKey.SharedKey.derive_shared_key_deprecated","title":"<code>derive_shared_key_deprecated(key_pair, other_public_key, salt)</code>  <code>staticmethod</code>","text":"symbolchain.nem.SharedKey.SharedKey.derive_shared_key_deprecated <p>Derives shared encryption key from private key, public key and salt.</p> <p>note: this method uses old method of deriving shared key and has been deprecated.</p>"},{"location":"devbook/reference/py/nem/TransactionFactory/","title":"TransactionFactory","text":""},{"location":"devbook/reference/py/nem/TransactionFactory/#symbolchain.nem.TransactionFactory.TransactionFactory","title":"<code>TransactionFactory</code>","text":"symbolchain.nem.TransactionFactory.TransactionFactory <p>Factory for creating NEM transactions.</p>"},{"location":"devbook/reference/py/nem/TransactionFactory/#symbolchain.nem.TransactionFactory.TransactionFactory.__init__","title":"<code>__init__(network, type_rule_overrides=None)</code>","text":"symbolchain.nem.TransactionFactory.TransactionFactory.__init__ <p>Creates a factory for the specified network.</p>"},{"location":"devbook/reference/py/nem/TransactionFactory/#symbolchain.nem.TransactionFactory.TransactionFactory.attach_signature","title":"<code>attach_signature(transaction, signature)</code>  <code>staticmethod</code>","text":"symbolchain.nem.TransactionFactory.TransactionFactory.attach_signature <p>Attaches a signature to a transaction.</p>"},{"location":"devbook/reference/py/nem/TransactionFactory/#symbolchain.nem.TransactionFactory.TransactionFactory.create","title":"<code>create(transaction_descriptor, autosort=True)</code>","text":"symbolchain.nem.TransactionFactory.TransactionFactory.create <p>Creates a transaction from a transaction descriptor. When autosort is set (default), descriptor arrays requiring ordering will be automatically sorted. When unset, descriptor arrays will be presumed to be already sorted.</p>"},{"location":"devbook/reference/py/nem/TransactionFactory/#symbolchain.nem.TransactionFactory.TransactionFactory.deserialize","title":"<code>deserialize(payload)</code>  <code>staticmethod</code>","text":"symbolchain.nem.TransactionFactory.TransactionFactory.deserialize <p>Deserializes a transaction from a binary payload.</p>"},{"location":"devbook/reference/py/nem/TransactionFactory/#symbolchain.nem.TransactionFactory.TransactionFactory.lookup_transaction_name","title":"<code>lookup_transaction_name(transaction_type, transaction_version)</code>  <code>staticmethod</code>","text":"symbolchain.nem.TransactionFactory.TransactionFactory.lookup_transaction_name <p>Looks up the friendly name for the specified transaction.</p>"},{"location":"devbook/reference/py/nem/TransactionFactory/#symbolchain.nem.TransactionFactory.TransactionFactory.to_non_verifiable_transaction","title":"<code>to_non_verifiable_transaction(transaction)</code>  <code>staticmethod</code>","text":"symbolchain.nem.TransactionFactory.TransactionFactory.to_non_verifiable_transaction <p>Converts a transaction to a non-verifiable transaction.</p>"},{"location":"devbook/reference/py/nem/__init__/","title":"init","text":""},{"location":"devbook/reference/py/sc/__init__/","title":"sc","text":""},{"location":"devbook/reference/py/symbol/IdGenerator/","title":"IdGenerator","text":""},{"location":"devbook/reference/py/symbol/IdGenerator/#symbolchain.symbol.IdGenerator.generate_mosaic_alias_id","title":"<code>generate_mosaic_alias_id(fully_qualified_name)</code>","text":"symbolchain.symbol.IdGenerator.generate_mosaic_alias_id <p>Generates a mosaic id from a fully qualified mosaic alias name.</p>"},{"location":"devbook/reference/py/symbol/IdGenerator/#symbolchain.symbol.IdGenerator.generate_mosaic_id","title":"<code>generate_mosaic_id(owner_address, nonce)</code>","text":"symbolchain.symbol.IdGenerator.generate_mosaic_id <p>Generates a mosaic id from an owner address and a nonce.</p>"},{"location":"devbook/reference/py/symbol/IdGenerator/#symbolchain.symbol.IdGenerator.generate_namespace_id","title":"<code>generate_namespace_id(name, parent_namespace_id=0)</code>","text":"symbolchain.symbol.IdGenerator.generate_namespace_id <p>Generates a namespace id from a name and an optional parent namespace id.</p>"},{"location":"devbook/reference/py/symbol/IdGenerator/#symbolchain.symbol.IdGenerator.generate_namespace_path","title":"<code>generate_namespace_path(fully_qualified_name)</code>","text":"symbolchain.symbol.IdGenerator.generate_namespace_path <p>Parses a fully qualified namespace name into a path.</p>"},{"location":"devbook/reference/py/symbol/IdGenerator/#symbolchain.symbol.IdGenerator.is_valid_namespace_name","title":"<code>is_valid_namespace_name(name)</code>","text":"symbolchain.symbol.IdGenerator.is_valid_namespace_name <p>Returns true if a name is a valid namespace name.</p>"},{"location":"devbook/reference/py/symbol/KeyPair/","title":"KeyPair","text":""},{"location":"devbook/reference/py/symbol/KeyPair/#symbolchain.symbol.KeyPair.KeyPair","title":"<code>KeyPair</code>","text":"symbolchain.symbol.KeyPair.KeyPair <p>Represents an ED25519 private and public key.</p>"},{"location":"devbook/reference/py/symbol/KeyPair/#symbolchain.symbol.KeyPair.KeyPair.private_key","title":"<code>private_key</code>  <code>property</code>","text":"<p>Gets the private key.</p>"},{"location":"devbook/reference/py/symbol/KeyPair/#symbolchain.symbol.KeyPair.KeyPair.public_key","title":"<code>public_key</code>  <code>property</code>","text":"<p>Gets the public key.</p>"},{"location":"devbook/reference/py/symbol/KeyPair/#symbolchain.symbol.KeyPair.KeyPair.__init__","title":"<code>__init__(private_key)</code>","text":"symbolchain.symbol.KeyPair.KeyPair.__init__ <p>Creates a key pair from a private key.</p>"},{"location":"devbook/reference/py/symbol/KeyPair/#symbolchain.symbol.KeyPair.KeyPair.sign","title":"<code>sign(message)</code>","text":"symbolchain.symbol.KeyPair.KeyPair.sign <p>Signs a message with the private key.</p>"},{"location":"devbook/reference/py/symbol/KeyPair/#symbolchain.symbol.KeyPair.Verifier","title":"<code>Verifier</code>","text":"symbolchain.symbol.KeyPair.Verifier <p>Verifies signatures signed by a single key pair.</p>"},{"location":"devbook/reference/py/symbol/KeyPair/#symbolchain.symbol.KeyPair.Verifier.__init__","title":"<code>__init__(public_key)</code>","text":"symbolchain.symbol.KeyPair.Verifier.__init__ <p>Creates a verifier from a public key.</p>"},{"location":"devbook/reference/py/symbol/KeyPair/#symbolchain.symbol.KeyPair.Verifier.verify","title":"<code>verify(message, signature)</code>","text":"symbolchain.symbol.KeyPair.Verifier.verify <p>Verifies a message signature.</p>"},{"location":"devbook/reference/py/symbol/Merkle/","title":"Merkle","text":""},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.BranchNode","title":"<code>BranchNode</code>","text":"<p>               Bases: <code>TreeNode</code></p> symbolchain.symbol.Merkle.BranchNode <p>Branch node in a compact patricia tree.</p>"},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.BranchNode.calculate_hash","title":"<code>calculate_hash()</code>","text":"symbolchain.symbol.Merkle.BranchNode.calculate_hash <p>Calculates node hash.</p>"},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.LeafNode","title":"<code>LeafNode</code>","text":"<p>               Bases: <code>TreeNode</code></p> symbolchain.symbol.Merkle.LeafNode <p>Leaf node in a compact patricia tree.</p>"},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.LeafNode.calculate_hash","title":"<code>calculate_hash()</code>","text":"symbolchain.symbol.Merkle.LeafNode.calculate_hash <p>Calculates node hash.</p>"},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.MerkleHashBuilder","title":"<code>MerkleHashBuilder</code>","text":"symbolchain.symbol.Merkle.MerkleHashBuilder <p>Builder for creating a merkle hash.</p>"},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.MerkleHashBuilder.__init__","title":"<code>__init__()</code>","text":"symbolchain.symbol.Merkle.MerkleHashBuilder.__init__ <p>Creates a merkle hash builder.</p>"},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.MerkleHashBuilder.final","title":"<code>final()</code>","text":"symbolchain.symbol.Merkle.MerkleHashBuilder.final <p>Calculates the merkle hash.</p>"},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.MerkleHashBuilder.update","title":"<code>update(component_hash)</code>","text":"symbolchain.symbol.Merkle.MerkleHashBuilder.update <p>Adds a hash to the merkle hash.</p>"},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.PatriciaMerkleProofResult","title":"<code>PatriciaMerkleProofResult</code>","text":"<p>               Bases: <code>Enum</code></p> symbolchain.symbol.Merkle.PatriciaMerkleProofResult <p>Possible results of a patricia merkle proof.</p>"},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.TreeNode","title":"<code>TreeNode</code>","text":"symbolchain.symbol.Merkle.TreeNode <p>Node in a compact patricia tree.</p>"},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.TreeNode.hex_path","title":"<code>hex_path</code>  <code>property</code>","text":"<p>Gets hex representation of path.</p>"},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.prove_merkle","title":"<code>prove_merkle(leaf_hash, merkle_path, root_hash)</code>","text":"symbolchain.symbol.Merkle.prove_merkle <p>Proves a merkle hash. Merkle hash chain path is ordered from leaf to root, where each element is MerklePart.</p>"},{"location":"devbook/reference/py/symbol/Merkle/#symbolchain.symbol.Merkle.prove_patricia_merkle","title":"<code>prove_patricia_merkle(encoded_key, value_to_test, merkle_path, state_hash, subcache_merkle_roots)</code>","text":"symbolchain.symbol.Merkle.prove_patricia_merkle <p>Proves a patricia merkle hash. Merkle node path is ordered from root to leaf, where each element is either BranchNode or LeafNode.</p>"},{"location":"devbook/reference/py/symbol/MessageEncoder/","title":"MessageEncoder","text":""},{"location":"devbook/reference/py/symbol/MessageEncoder/#symbolchain.symbol.MessageEncoder.MessageEncoder","title":"<code>MessageEncoder</code>","text":"symbolchain.symbol.MessageEncoder.MessageEncoder <p>Encrypts and encodes messages between two parties.</p>"},{"location":"devbook/reference/py/symbol/MessageEncoder/#symbolchain.symbol.MessageEncoder.MessageEncoder.public_key","title":"<code>public_key</code>  <code>property</code>","text":"<p>Public key used for message encoding.</p>"},{"location":"devbook/reference/py/symbol/MessageEncoder/#symbolchain.symbol.MessageEncoder.MessageEncoder.__init__","title":"<code>__init__(key_pair)</code>","text":"symbolchain.symbol.MessageEncoder.MessageEncoder.__init__ <p>Creates message encoder around key pair.</p>"},{"location":"devbook/reference/py/symbol/MessageEncoder/#symbolchain.symbol.MessageEncoder.MessageEncoder.encode","title":"<code>encode(recipient_public_key, message)</code>","text":"symbolchain.symbol.MessageEncoder.MessageEncoder.encode <p>Encodes message to recipient using recommended format.</p>"},{"location":"devbook/reference/py/symbol/MessageEncoder/#symbolchain.symbol.MessageEncoder.MessageEncoder.encode_deprecated","title":"<code>encode_deprecated(recipient_public_key, message)</code>","text":"symbolchain.symbol.MessageEncoder.MessageEncoder.encode_deprecated <p>Encodes message to recipient using (deprecated) wallet format.</p>"},{"location":"devbook/reference/py/symbol/MessageEncoder/#symbolchain.symbol.MessageEncoder.MessageEncoder.encode_persistent_harvesting_delegation","title":"<code>encode_persistent_harvesting_delegation(node_public_key, remote_key_pair, vrf_root_key_pair)</code>  <code>staticmethod</code>","text":"symbolchain.symbol.MessageEncoder.MessageEncoder.encode_persistent_harvesting_delegation <p>Encodes persistent harvesting delegation to node.</p>"},{"location":"devbook/reference/py/symbol/MessageEncoder/#symbolchain.symbol.MessageEncoder.MessageEncoder.try_decode","title":"<code>try_decode(recipient_public_key, encoded_message)</code>","text":"symbolchain.symbol.MessageEncoder.MessageEncoder.try_decode <p>Tries to decode encoded message, returns tuple: * True, message - if message has been decoded and decrypted * False, encoded_message - otherwise</p>"},{"location":"devbook/reference/py/symbol/MessageEncoder/#symbolchain.symbol.MessageEncoder.MessageEncoder.try_decode_deprecated","title":"<code>try_decode_deprecated(recipient_public_key, encoded_message)</code>","text":"symbolchain.symbol.MessageEncoder.MessageEncoder.try_decode_deprecated <p>Tries to decode encoded wallet message, returns tuple: * True, message - if message has been decoded and decrypted * False, encoded_message - otherwise</p>"},{"location":"devbook/reference/py/symbol/Metadata/","title":"Metadata","text":""},{"location":"devbook/reference/py/symbol/Metadata/#symbolchain.symbol.Metadata.metadata_generate_key","title":"<code>metadata_generate_key(seed)</code>","text":"symbolchain.symbol.Metadata.metadata_generate_key <p>Generates a metadata key from a string.</p>"},{"location":"devbook/reference/py/symbol/Metadata/#symbolchain.symbol.Metadata.metadata_update_value","title":"<code>metadata_update_value(old_value, new_value)</code>","text":"symbolchain.symbol.Metadata.metadata_update_value <p>Creates a metadata payload for updating old value to new value.</p>"},{"location":"devbook/reference/py/symbol/Network/","title":"Network","text":""},{"location":"devbook/reference/py/symbol/Network/#symbolchain.symbol.Network.Address","title":"<code>Address</code>","text":"<p>               Bases: <code>ByteArray</code></p> symbolchain.symbol.Network.Address <p>Represents a Symbol address.</p>"},{"location":"devbook/reference/py/symbol/Network/#symbolchain.symbol.Network.Address.__init__","title":"<code>__init__(address)</code>","text":"symbolchain.symbol.Network.Address.__init__ <p>Creates an address from a decoded or encoded address.</p>"},{"location":"devbook/reference/py/symbol/Network/#symbolchain.symbol.Network.Address.from_decoded_address_hex_string","title":"<code>from_decoded_address_hex_string(hex_string)</code>  <code>staticmethod</code>","text":"symbolchain.symbol.Network.Address.from_decoded_address_hex_string <p>Creates an address from a decoded address hex string (typically from REST).</p>"},{"location":"devbook/reference/py/symbol/Network/#symbolchain.symbol.Network.Address.from_namespace_id","title":"<code>from_namespace_id(namespace_id, network_identifier)</code>  <code>staticmethod</code>","text":"symbolchain.symbol.Network.Address.from_namespace_id <p>Creates an address from a namespace id.</p>"},{"location":"devbook/reference/py/symbol/Network/#symbolchain.symbol.Network.Address.to_namespace_id","title":"<code>to_namespace_id()</code>","text":"symbolchain.symbol.Network.Address.to_namespace_id <p>Attempts to convert this address into a namespace id.</p>"},{"location":"devbook/reference/py/symbol/Network/#symbolchain.symbol.Network.Network","title":"<code>Network</code>","text":"<p>               Bases: <code>Network</code></p> symbolchain.symbol.Network.Network <p>Represents a Symbol network.</p>"},{"location":"devbook/reference/py/symbol/Network/#symbolchain.symbol.Network.Network.__init__","title":"<code>__init__(name, identifier, epoch_time, generation_hash_seed=None)</code>","text":"symbolchain.symbol.Network.Network.__init__ <p>Creates a new network with the specified properties.</p>"},{"location":"devbook/reference/py/symbol/Network/#symbolchain.symbol.Network.NetworkTimestamp","title":"<code>NetworkTimestamp</code>","text":"<p>               Bases: <code>NetworkTimestamp</code></p> symbolchain.symbol.Network.NetworkTimestamp <p>Represents a symbol network timestamp with millisecond resolution.</p>"},{"location":"devbook/reference/py/symbol/Network/#symbolchain.symbol.Network.NetworkTimestamp.add_milliseconds","title":"<code>add_milliseconds(count)</code>","text":"symbolchain.symbol.Network.NetworkTimestamp.add_milliseconds <p>Adds a specified number of milliseconds to this timestamp.</p>"},{"location":"devbook/reference/py/symbol/SharedKey/","title":"SharedKey","text":""},{"location":"devbook/reference/py/symbol/SharedKey/#symbolchain.symbol.SharedKey.SharedKey","title":"<code>SharedKey</code>","text":"<p>               Bases: <code>SharedKey</code></p> symbolchain.symbol.SharedKey.SharedKey"},{"location":"devbook/reference/py/symbol/SharedKey/#symbolchain.symbol.SharedKey.SharedKey.derive_shared_key","title":"<code>derive_shared_key(key_pair, other_public_key)</code>  <code>staticmethod</code>","text":"symbolchain.symbol.SharedKey.SharedKey.derive_shared_key <p>Derives shared encryption key from private key and public key.</p>"},{"location":"devbook/reference/py/symbol/TransactionFactory/","title":"TransactionFactory","text":""},{"location":"devbook/reference/py/symbol/TransactionFactory/#symbolchain.symbol.TransactionFactory.TransactionFactory","title":"<code>TransactionFactory</code>","text":"symbolchain.symbol.TransactionFactory.TransactionFactory <p>Factory for creating Symbol transactions.</p>"},{"location":"devbook/reference/py/symbol/TransactionFactory/#symbolchain.symbol.TransactionFactory.TransactionFactory.__init__","title":"<code>__init__(network, type_rule_overrides=None)</code>","text":"symbolchain.symbol.TransactionFactory.TransactionFactory.__init__ <p>Creates a factory for the specified network.</p>"},{"location":"devbook/reference/py/symbol/TransactionFactory/#symbolchain.symbol.TransactionFactory.TransactionFactory.attach_signature","title":"<code>attach_signature(transaction, signature)</code>  <code>staticmethod</code>","text":"symbolchain.symbol.TransactionFactory.TransactionFactory.attach_signature <p>Attaches a signature to a transaction.</p>"},{"location":"devbook/reference/py/symbol/TransactionFactory/#symbolchain.symbol.TransactionFactory.TransactionFactory.create","title":"<code>create(transaction_descriptor, autosort=True)</code>","text":"symbolchain.symbol.TransactionFactory.TransactionFactory.create <p>Creates a transaction from a transaction descriptor. When autosort is set (default), descriptor arrays requiring ordering will be automatically sorted. When unset, descriptor arrays will be presumed to be already sorted.</p>"},{"location":"devbook/reference/py/symbol/TransactionFactory/#symbolchain.symbol.TransactionFactory.TransactionFactory.create_embedded","title":"<code>create_embedded(transaction_descriptor, autosort=True)</code>","text":"symbolchain.symbol.TransactionFactory.TransactionFactory.create_embedded <p>Creates an embedded transaction from a transaction descriptor. When autosort is set (default), descriptor arrays requiring ordering will be automatically sorted. When unset, descriptor arrays will be presumed to be already sorted.</p>"},{"location":"devbook/reference/py/symbol/TransactionFactory/#symbolchain.symbol.TransactionFactory.TransactionFactory.deserialize","title":"<code>deserialize(payload)</code>  <code>staticmethod</code>","text":"symbolchain.symbol.TransactionFactory.TransactionFactory.deserialize <p>Deserializes a transaction from a binary payload.</p>"},{"location":"devbook/reference/py/symbol/TransactionFactory/#symbolchain.symbol.TransactionFactory.TransactionFactory.deserialize_embedded","title":"<code>deserialize_embedded(payload)</code>  <code>staticmethod</code>","text":"symbolchain.symbol.TransactionFactory.TransactionFactory.deserialize_embedded <p>Deserializes an embedded transaction from a binary payload.</p>"},{"location":"devbook/reference/py/symbol/TransactionFactory/#symbolchain.symbol.TransactionFactory.TransactionFactory.lookup_transaction_name","title":"<code>lookup_transaction_name(transaction_type, transaction_version)</code>  <code>staticmethod</code>","text":"symbolchain.symbol.TransactionFactory.TransactionFactory.lookup_transaction_name <p>Looks up the friendly name for the specified transaction.</p>"},{"location":"devbook/reference/py/symbol/VotingKeysGenerator/","title":"VotingKeysGenerator","text":""},{"location":"devbook/reference/py/symbol/VotingKeysGenerator/#symbolchain.symbol.VotingKeysGenerator.VotingKeysGenerator","title":"<code>VotingKeysGenerator</code>","text":"symbolchain.symbol.VotingKeysGenerator.VotingKeysGenerator <p>Generates symbol voting keys.</p>"},{"location":"devbook/reference/py/symbol/VotingKeysGenerator/#symbolchain.symbol.VotingKeysGenerator.VotingKeysGenerator.__init__","title":"<code>__init__(root_key_pair, private_key_generator=PrivateKey.random)</code>","text":"symbolchain.symbol.VotingKeysGenerator.VotingKeysGenerator.__init__ <p>Creates a generator around a voting root key pair.</p>"},{"location":"devbook/reference/py/symbol/VotingKeysGenerator/#symbolchain.symbol.VotingKeysGenerator.VotingKeysGenerator.generate","title":"<code>generate(start_epoch, end_epoch)</code>","text":"symbolchain.symbol.VotingKeysGenerator.VotingKeysGenerator.generate <p>Generates voting keys for specified epochs.</p>"},{"location":"devbook/reference/py/symbol/__init__/","title":"init","text":""},{"location":"textbook/glossary/","title":"Glossary","text":"Turing-complete In colloquial terms, a system is said to be Turing-complete if it can perform any kind of computation. XYM The coolest coin."},{"location":"textbook/intro/","title":"Introduction","text":"<p>Welcome to the textbook.</p> <p>You will learn everything about 6251a85a-47d0-11ee-be56-0242ac120002:_:XYM:&lt;__None__&gt;:01d421b98991aaf3c61b7c9811238a03 here.</p>"},{"location":"userbook/intro/","title":"Introduction","text":"<p>Welcome to the user guides.</p>"}]}