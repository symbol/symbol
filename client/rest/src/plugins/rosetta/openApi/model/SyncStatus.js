/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';

/**
 * The SyncStatus model module.
 * @module model/SyncStatus
 * @version 1.4.13
 */
class SyncStatus {
    /**
     * Constructs a new <code>SyncStatus</code>.
     * SyncStatus is used to provide additional context about an implementation&#39;s sync status. This object is often used by implementations to indicate healthiness when block data cannot be queried until some sync phase completes or cannot be determined by comparing the timestamp of the most recent block with the current time.
     * @alias module:model/SyncStatus
     */
    constructor() { 
        
        SyncStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SyncStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SyncStatus} obj Optional instance to populate.
     * @return {module:model/SyncStatus} The populated <code>SyncStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SyncStatus();

            if (data.hasOwnProperty('current_index')) {
                obj['current_index'] = ApiClient.convertToType(data['current_index'], 'Number');
            }
            if (data.hasOwnProperty('target_index')) {
                obj['target_index'] = ApiClient.convertToType(data['target_index'], 'Number');
            }
            if (data.hasOwnProperty('stage')) {
                obj['stage'] = ApiClient.convertToType(data['stage'], 'String');
            }
            if (data.hasOwnProperty('synced')) {
                obj['synced'] = ApiClient.convertToType(data['synced'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SyncStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SyncStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['stage'] && !(typeof data['stage'] === 'string' || data['stage'] instanceof String)) {
            throw new Error("Expected the field `stage` to be a primitive type in the JSON string but got " + data['stage']);
        }

        return true;
    }


}



/**
 * CurrentIndex is the index of the last synced block in the current stage. This is a separate field from current_block_identifier in NetworkStatusResponse because blocks with indices up to and including the current_index may not yet be queryable by the caller. To reiterate, all indices up to and including current_block_identifier in NetworkStatusResponse must be queryable via the /block endpoint (excluding indices less than oldest_block_identifier).
 * @member {Number} current_index
 */
SyncStatus.prototype['current_index'] = undefined;

/**
 * TargetIndex is the index of the block that the implementation is attempting to sync to in the current stage.
 * @member {Number} target_index
 */
SyncStatus.prototype['target_index'] = undefined;

/**
 * Stage is the phase of the sync process.
 * @member {String} stage
 */
SyncStatus.prototype['stage'] = undefined;

/**
 * synced is a boolean that indicates if an implementation has synced up to the most recent block. If this field is not populated, the caller should rely on a traditional tip timestamp comparison to determine if an implementation is synced. This field is particularly useful for quiescent blockchains (blocks only produced when there are pending transactions). In these blockchains, the most recent block could have a timestamp far behind the current time but the node could be healthy and at tip.
 * @member {Boolean} synced
 */
SyncStatus.prototype['synced'] = undefined;






export default SyncStatus;

