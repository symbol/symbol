/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlockTransaction from './BlockTransaction';

/**
 * The SearchTransactionsResponse model module.
 * @module model/SearchTransactionsResponse
 * @version 1.4.13
 */
class SearchTransactionsResponse {
    /**
     * Constructs a new <code>SearchTransactionsResponse</code>.
     * SearchTransactionsResponse contains an ordered collection of BlockTransactions that match the query in SearchTransactionsRequest. These BlockTransactions are sorted from most recent block to oldest block.
     * @alias module:model/SearchTransactionsResponse
     * @param transactions {Array.<module:model/BlockTransaction>} transactions is an array of BlockTransactions sorted by most recent BlockIdentifier (meaning that transactions in recent blocks appear first). If there are many transactions for a particular search, transactions may not contain all matching transactions. It is up to the caller to paginate these transactions using the max_block field.
     * @param totalCount {Number} total_count is the number of results for a given search. Callers typically use this value to concurrently fetch results by offset or to display a virtual page number associated with results.
     */
    constructor(transactions, totalCount) { 
        
        SearchTransactionsResponse.initialize(this, transactions, totalCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transactions, totalCount) { 
        obj['transactions'] = transactions;
        obj['total_count'] = totalCount;
    }

    /**
     * Constructs a <code>SearchTransactionsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchTransactionsResponse} obj Optional instance to populate.
     * @return {module:model/SearchTransactionsResponse} The populated <code>SearchTransactionsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchTransactionsResponse();

            if (data.hasOwnProperty('transactions')) {
                obj['transactions'] = ApiClient.convertToType(data['transactions'], [BlockTransaction]);
            }
            if (data.hasOwnProperty('total_count')) {
                obj['total_count'] = ApiClient.convertToType(data['total_count'], 'Number');
            }
            if (data.hasOwnProperty('next_offset')) {
                obj['next_offset'] = ApiClient.convertToType(data['next_offset'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchTransactionsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchTransactionsResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchTransactionsResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transactions'])) {
                throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
            }
            // validate the optional field `transactions` (array)
            for (const item of data['transactions']) {
                BlockTransaction.validateJSON(item);
            };
        }

        return true;
    }


}

SearchTransactionsResponse.RequiredProperties = ["transactions", "total_count"];

/**
 * transactions is an array of BlockTransactions sorted by most recent BlockIdentifier (meaning that transactions in recent blocks appear first). If there are many transactions for a particular search, transactions may not contain all matching transactions. It is up to the caller to paginate these transactions using the max_block field.
 * @member {Array.<module:model/BlockTransaction>} transactions
 */
SearchTransactionsResponse.prototype['transactions'] = undefined;

/**
 * total_count is the number of results for a given search. Callers typically use this value to concurrently fetch results by offset or to display a virtual page number associated with results.
 * @member {Number} total_count
 */
SearchTransactionsResponse.prototype['total_count'] = undefined;

/**
 * next_offset is the next offset to use when paginating through transaction results. If this field is not populated, there are no more transactions to query.
 * @member {Number} next_offset
 */
SearchTransactionsResponse.prototype['next_offset'] = undefined;






export default SearchTransactionsResponse;

