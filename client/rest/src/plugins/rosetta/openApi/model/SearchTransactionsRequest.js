/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';
import AccountIdentifier from './AccountIdentifier.js';
import CoinIdentifier from './CoinIdentifier.js';
import Currency from './Currency.js';
import NetworkIdentifier from './NetworkIdentifier.js';
import Operator from './Operator.js';
import TransactionIdentifier from './TransactionIdentifier.js';

/**
 * The SearchTransactionsRequest model module.
 * @module model/SearchTransactionsRequest
 * @version 1.4.13
 */
class SearchTransactionsRequest {
    /**
     * Constructs a new <code>SearchTransactionsRequest</code>.
     * SearchTransactionsRequest is used to search for transactions matching a set of provided conditions in canonical blocks.
     * @alias module:model/SearchTransactionsRequest
     * @param networkIdentifier {module:model/NetworkIdentifier} 
     */
    constructor(networkIdentifier) { 
        
        SearchTransactionsRequest.initialize(this, networkIdentifier);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, networkIdentifier) { 
        obj['network_identifier'] = networkIdentifier;
    }

    /**
     * Constructs a <code>SearchTransactionsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchTransactionsRequest} obj Optional instance to populate.
     * @return {module:model/SearchTransactionsRequest} The populated <code>SearchTransactionsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchTransactionsRequest();

            if (data.hasOwnProperty('network_identifier')) {
                obj['network_identifier'] = NetworkIdentifier.constructFromObject(data['network_identifier']);
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = Operator.constructFromObject(data['operator']);
            }
            if (data.hasOwnProperty('max_block')) {
                obj['max_block'] = ApiClient.convertToType(data['max_block'], 'Number');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('transaction_identifier')) {
                obj['transaction_identifier'] = TransactionIdentifier.constructFromObject(data['transaction_identifier']);
            }
            if (data.hasOwnProperty('account_identifier')) {
                obj['account_identifier'] = AccountIdentifier.constructFromObject(data['account_identifier']);
            }
            if (data.hasOwnProperty('coin_identifier')) {
                obj['coin_identifier'] = CoinIdentifier.constructFromObject(data['coin_identifier']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchTransactionsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchTransactionsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchTransactionsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `network_identifier`
        if (data['network_identifier']) { // data not null
          NetworkIdentifier.validateJSON(data['network_identifier']);
        }
        // validate the optional field `transaction_identifier`
        if (data['transaction_identifier']) { // data not null
          TransactionIdentifier.validateJSON(data['transaction_identifier']);
        }
        // validate the optional field `account_identifier`
        if (data['account_identifier']) { // data not null
          AccountIdentifier.validateJSON(data['account_identifier']);
        }
        // validate the optional field `coin_identifier`
        if (data['coin_identifier']) { // data not null
          CoinIdentifier.validateJSON(data['coin_identifier']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          Currency.validateJSON(data['currency']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }

        return true;
    }


}

SearchTransactionsRequest.RequiredProperties = ["network_identifier"];

/**
 * @member {module:model/NetworkIdentifier} network_identifier
 */
SearchTransactionsRequest.prototype['network_identifier'] = undefined;

/**
 * @member {module:model/Operator} operator
 */
SearchTransactionsRequest.prototype['operator'] = undefined;

/**
 * max_block is the largest block index to consider when searching for transactions. If this field is not populated, the current block is considered the max_block. If you do not specify a max_block, it is possible a newly synced block will interfere with paginated transaction queries (as the offset could become invalid with newly added rows).
 * @member {Number} max_block
 */
SearchTransactionsRequest.prototype['max_block'] = undefined;

/**
 * offset is the offset into the query result to start returning transactions. If any search conditions are changed, the query offset will change and you must restart your search iteration.
 * @member {Number} offset
 */
SearchTransactionsRequest.prototype['offset'] = undefined;

/**
 * limit is the maximum number of transactions to return in one call. The implementation may return <= limit transactions.
 * @member {Number} limit
 */
SearchTransactionsRequest.prototype['limit'] = undefined;

/**
 * @member {module:model/TransactionIdentifier} transaction_identifier
 */
SearchTransactionsRequest.prototype['transaction_identifier'] = undefined;

/**
 * @member {module:model/AccountIdentifier} account_identifier
 */
SearchTransactionsRequest.prototype['account_identifier'] = undefined;

/**
 * @member {module:model/CoinIdentifier} coin_identifier
 */
SearchTransactionsRequest.prototype['coin_identifier'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
SearchTransactionsRequest.prototype['currency'] = undefined;

/**
 * status is the network-specific operation type.
 * @member {String} status
 */
SearchTransactionsRequest.prototype['status'] = undefined;

/**
 * type is the network-specific operation type.
 * @member {String} type
 */
SearchTransactionsRequest.prototype['type'] = undefined;

/**
 * address is AccountIdentifier.Address. This is used to get all transactions related to an AccountIdentifier.Address, regardless of SubAccountIdentifier.
 * @member {String} address
 */
SearchTransactionsRequest.prototype['address'] = undefined;

/**
 * success is a synthetic condition populated by parsing network-specific operation statuses (using the mapping provided in `/network/options`).
 * @member {Boolean} success
 */
SearchTransactionsRequest.prototype['success'] = undefined;






export default SearchTransactionsRequest;

