/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';
import BlockIdentifier from './BlockIdentifier.js';
import Transaction from './Transaction.js';

/**
 * The Block model module.
 * @module model/Block
 * @version 1.4.13
 */
class Block {
	/**
	 * Constructs a new <code>Block</code>.
	 * Blocks contain an array of Transactions that occurred at a particular BlockIdentifier. A hard requirement for blocks returned by Rosetta implementations is that they MUST be _inalterable_: once a client has requested and received a block identified by a specific BlockIndentifier, all future calls for that same BlockIdentifier must return the same block contents.
	 * @alias module:model/Block
	 * @param blockIdentifier {module:model/BlockIdentifier}
	 * @param parentBlockIdentifier {module:model/BlockIdentifier}
	 * @param timestamp {Number} The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second.
	 * @param transactions {Array.<module:model/Transaction>}
	 */
	constructor(blockIdentifier, parentBlockIdentifier, timestamp, transactions) {

		Block.initialize(this, blockIdentifier, parentBlockIdentifier, timestamp, transactions);
	}

	/**
	 * Initializes the fields of this object.
	 * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
	 * Only for internal use.
	 */
	static initialize(obj, blockIdentifier, parentBlockIdentifier, timestamp, transactions) {
		obj['block_identifier'] = blockIdentifier;
		obj['parent_block_identifier'] = parentBlockIdentifier;
		obj['timestamp'] = timestamp;
		obj['transactions'] = transactions;
	}

	/**
	 * Constructs a <code>Block</code> from a plain JavaScript object, optionally creating a new instance.
	 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
	 * @param {Object} data The plain JavaScript object bearing properties of interest.
	 * @param {module:model/Block} obj Optional instance to populate.
	 * @return {module:model/Block} The populated <code>Block</code> instance.
	 */
	static constructFromObject(data, obj) {
		if (data) {
			obj = obj || new Block();

			if (data.hasOwnProperty('block_identifier')) {
				obj['block_identifier'] = BlockIdentifier.constructFromObject(data['block_identifier']);
			}
			if (data.hasOwnProperty('parent_block_identifier')) {
				obj['parent_block_identifier'] = BlockIdentifier.constructFromObject(data['parent_block_identifier']);
			}
			if (data.hasOwnProperty('timestamp')) {
				obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
			}
			if (data.hasOwnProperty('transactions')) {
				obj['transactions'] = ApiClient.convertToType(data['transactions'], [Transaction]);
			}
			if (data.hasOwnProperty('metadata')) {
				obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
			}
		}
		return obj;
	}

	/**
	 * Validates the JSON data with respect to <code>Block</code>.
	 * @param {Object} data The plain JavaScript object bearing properties of interest.
	 * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Block</code>.
	 */
	static validateJSON(data) {
		// check to make sure all required properties are present in the JSON string
		for (const property of Block.RequiredProperties) {
			if (!data.hasOwnProperty(property)) {
				throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
			}
		}
		// validate the optional field `block_identifier`
		if (data['block_identifier']) { // data not null
		  BlockIdentifier.validateJSON(data['block_identifier']);
		}
		// validate the optional field `parent_block_identifier`
		if (data['parent_block_identifier']) { // data not null
		  BlockIdentifier.validateJSON(data['parent_block_identifier']);
		}
		if (data['transactions']) { // data not null
			// ensure the json data is an array
			if (!Array.isArray(data['transactions'])) {
				throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
			}
			// validate the optional field `transactions` (array)
			for (const item of data['transactions']) {
				Transaction.validateJSON(item);
			};
		}

		return true;
	}


}

Block.RequiredProperties = ["block_identifier", "parent_block_identifier", "timestamp", "transactions"];

/**
 * @member {module:model/BlockIdentifier} block_identifier
 */
Block.prototype['block_identifier'] = undefined;

/**
 * @member {module:model/BlockIdentifier} parent_block_identifier
 */
Block.prototype['parent_block_identifier'] = undefined;

/**
 * The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second.
 * @member {Number} timestamp
 */
Block.prototype['timestamp'] = undefined;

/**
 * @member {Array.<module:model/Transaction>} transactions
 */
Block.prototype['transactions'] = undefined;

/**
 * @member {Object} metadata
 */
Block.prototype['metadata'] = undefined;






export default Block;

