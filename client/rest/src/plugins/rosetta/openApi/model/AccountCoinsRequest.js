/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';
import AccountIdentifier from './AccountIdentifier.js';
import Currency from './Currency.js';
import NetworkIdentifier from './NetworkIdentifier.js';

/**
 * The AccountCoinsRequest model module.
 * @module model/AccountCoinsRequest
 * @version 1.4.13
 */
class AccountCoinsRequest {
	/**
	 * Constructs a new <code>AccountCoinsRequest</code>.
	 * AccountCoinsRequest is utilized to make a request on the /account/coins endpoint.
	 * @alias module:model/AccountCoinsRequest
	 * @param networkIdentifier {module:model/NetworkIdentifier}
	 * @param accountIdentifier {module:model/AccountIdentifier}
	 * @param includeMempool {Boolean} Include state from the mempool when looking up an account's unspent coins. Note, using this functionality breaks any guarantee of idempotency.
	 */
	constructor(networkIdentifier, accountIdentifier, includeMempool) {

		AccountCoinsRequest.initialize(this, networkIdentifier, accountIdentifier, includeMempool);
	}

	/**
	 * Initializes the fields of this object.
	 * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
	 * Only for internal use.
	 */
	static initialize(obj, networkIdentifier, accountIdentifier, includeMempool) {
		obj['network_identifier'] = networkIdentifier;
		obj['account_identifier'] = accountIdentifier;
		obj['include_mempool'] = includeMempool;
	}

	/**
	 * Constructs a <code>AccountCoinsRequest</code> from a plain JavaScript object, optionally creating a new instance.
	 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
	 * @param {Object} data The plain JavaScript object bearing properties of interest.
	 * @param {module:model/AccountCoinsRequest} obj Optional instance to populate.
	 * @return {module:model/AccountCoinsRequest} The populated <code>AccountCoinsRequest</code> instance.
	 */
	static constructFromObject(data, obj) {
		if (data) {
			obj = obj || new AccountCoinsRequest();

			if (data.hasOwnProperty('network_identifier')) {
				obj['network_identifier'] = NetworkIdentifier.constructFromObject(data['network_identifier']);
			}
			if (data.hasOwnProperty('account_identifier')) {
				obj['account_identifier'] = AccountIdentifier.constructFromObject(data['account_identifier']);
			}
			if (data.hasOwnProperty('include_mempool')) {
				obj['include_mempool'] = ApiClient.convertToType(data['include_mempool'], 'Boolean');
			}
			if (data.hasOwnProperty('currencies')) {
				obj['currencies'] = ApiClient.convertToType(data['currencies'], [Currency]);
			}
		}
		return obj;
	}

	/**
	 * Validates the JSON data with respect to <code>AccountCoinsRequest</code>.
	 * @param {Object} data The plain JavaScript object bearing properties of interest.
	 * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountCoinsRequest</code>.
	 */
	static validateJSON(data) {
		// check to make sure all required properties are present in the JSON string
		for (const property of AccountCoinsRequest.RequiredProperties) {
			if (!data.hasOwnProperty(property)) {
				throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
			}
		}
		// validate the optional field `network_identifier`
		if (data['network_identifier']) { // data not null
		  NetworkIdentifier.validateJSON(data['network_identifier']);
		}
		// validate the optional field `account_identifier`
		if (data['account_identifier']) { // data not null
		  AccountIdentifier.validateJSON(data['account_identifier']);
		}
		if (data['currencies']) { // data not null
			// ensure the json data is an array
			if (!Array.isArray(data['currencies'])) {
				throw new Error("Expected the field `currencies` to be an array in the JSON data but got " + data['currencies']);
			}
			// validate the optional field `currencies` (array)
			for (const item of data['currencies']) {
				Currency.validateJSON(item);
			};
		}

		return true;
	}


}

AccountCoinsRequest.RequiredProperties = ["network_identifier", "account_identifier", "include_mempool"];

/**
 * @member {module:model/NetworkIdentifier} network_identifier
 */
AccountCoinsRequest.prototype['network_identifier'] = undefined;

/**
 * @member {module:model/AccountIdentifier} account_identifier
 */
AccountCoinsRequest.prototype['account_identifier'] = undefined;

/**
 * Include state from the mempool when looking up an account's unspent coins. Note, using this functionality breaks any guarantee of idempotency.
 * @member {Boolean} include_mempool
 */
AccountCoinsRequest.prototype['include_mempool'] = undefined;

/**
 * In some cases, the caller may not want to retrieve coins for all currencies for an AccountIdentifier. If the currencies field is populated, only coins for the specified currencies will be returned. If not populated, all unspent coins will be returned.
 * @member {Array.<module:model/Currency>} currencies
 */
AccountCoinsRequest.prototype['currencies'] = undefined;






export default AccountCoinsRequest;

