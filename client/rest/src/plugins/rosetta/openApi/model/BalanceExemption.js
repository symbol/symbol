/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';
import Currency from './Currency.js';
import ExemptionType from './ExemptionType.js';

/**
 * The BalanceExemption model module.
 * @module model/BalanceExemption
 * @version 1.4.13
 */
class BalanceExemption {
    /**
     * Constructs a new <code>BalanceExemption</code>.
     * BalanceExemption indicates that the balance for an exempt account could change without a corresponding Operation. This typically occurs with staking rewards, vesting balances, and Currencies with a dynamic supply. Currently, it is possible to exempt an account from strict reconciliation by SubAccountIdentifier.Address or by Currency. This means that any account with SubAccountIdentifier.Address would be exempt or any balance of a particular Currency would be exempt, respectively. BalanceExemptions should be used sparingly as they may introduce significant complexity for integrators that attempt to reconcile all account balance changes. If your implementation relies on any BalanceExemptions, you MUST implement historical balance lookup (the ability to query an account balance at any BlockIdentifier).
     * @alias module:model/BalanceExemption
     */
    constructor() { 
        
        BalanceExemption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BalanceExemption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BalanceExemption} obj Optional instance to populate.
     * @return {module:model/BalanceExemption} The populated <code>BalanceExemption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BalanceExemption();

            if (data.hasOwnProperty('sub_account_address')) {
                obj['sub_account_address'] = ApiClient.convertToType(data['sub_account_address'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('exemption_type')) {
                obj['exemption_type'] = ExemptionType.constructFromObject(data['exemption_type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BalanceExemption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BalanceExemption</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sub_account_address'] && !(typeof data['sub_account_address'] === 'string' || data['sub_account_address'] instanceof String)) {
            throw new Error("Expected the field `sub_account_address` to be a primitive type in the JSON string but got " + data['sub_account_address']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          Currency.validateJSON(data['currency']);
        }

        return true;
    }


}



/**
 * SubAccountAddress is the SubAccountIdentifier.Address that the BalanceExemption applies to (regardless of the value of SubAccountIdentifier.Metadata).
 * @member {String} sub_account_address
 */
BalanceExemption.prototype['sub_account_address'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
BalanceExemption.prototype['currency'] = undefined;

/**
 * @member {module:model/ExemptionType} exemption_type
 */
BalanceExemption.prototype['exemption_type'] = undefined;






export default BalanceExemption;

