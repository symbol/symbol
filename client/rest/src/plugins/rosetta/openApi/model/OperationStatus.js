/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';

/**
 * The OperationStatus model module.
 * @module model/OperationStatus
 * @version 1.4.13
 */
class OperationStatus {
	/**
	 * Constructs a new <code>OperationStatus</code>.
	 * OperationStatus is utilized to indicate which Operation status are considered successful.
	 * @alias module:model/OperationStatus
	 * @param status {String} The status is the network-specific status of the operation.
	 * @param successful {Boolean} An Operation is considered successful if the Operation.Amount should affect the Operation.Account. Some blockchains (like Bitcoin) only include successful operations in blocks but other blockchains (like Ethereum) include unsuccessful operations that incur a fee. To reconcile the computed balance from the stream of Operations, it is critical to understand which Operation.Status indicate an Operation is successful and should affect an Account.
	 */
	constructor(status, successful) {

		OperationStatus.initialize(this, status, successful);
	}

	/**
	 * Initializes the fields of this object.
	 * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
	 * Only for internal use.
	 */
	static initialize(obj, status, successful) {
		obj['status'] = status;
		obj['successful'] = successful;
	}

	/**
	 * Constructs a <code>OperationStatus</code> from a plain JavaScript object, optionally creating a new instance.
	 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
	 * @param {Object} data The plain JavaScript object bearing properties of interest.
	 * @param {module:model/OperationStatus} obj Optional instance to populate.
	 * @return {module:model/OperationStatus} The populated <code>OperationStatus</code> instance.
	 */
	static constructFromObject(data, obj) {
		if (data) {
			obj = obj || new OperationStatus();

			if (data.hasOwnProperty('status')) {
				obj['status'] = ApiClient.convertToType(data['status'], 'String');
			}
			if (data.hasOwnProperty('successful')) {
				obj['successful'] = ApiClient.convertToType(data['successful'], 'Boolean');
			}
		}
		return obj;
	}

	/**
	 * Validates the JSON data with respect to <code>OperationStatus</code>.
	 * @param {Object} data The plain JavaScript object bearing properties of interest.
	 * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperationStatus</code>.
	 */
	static validateJSON(data) {
		// check to make sure all required properties are present in the JSON string
		for (const property of OperationStatus.RequiredProperties) {
			if (!data.hasOwnProperty(property)) {
				throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
			}
		}
		// ensure the json data is a string
		if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
			throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
		}

		return true;
	}


}

OperationStatus.RequiredProperties = ["status", "successful"];

/**
 * The status is the network-specific status of the operation.
 * @member {String} status
 */
OperationStatus.prototype['status'] = undefined;

/**
 * An Operation is considered successful if the Operation.Amount should affect the Operation.Account. Some blockchains (like Bitcoin) only include successful operations in blocks but other blockchains (like Ethereum) include unsuccessful operations that incur a fee. To reconcile the computed balance from the stream of Operations, it is critical to understand which Operation.Status indicate an Operation is successful and should affect an Account.
 * @member {Boolean} successful
 */
OperationStatus.prototype['successful'] = undefined;






export default OperationStatus;

