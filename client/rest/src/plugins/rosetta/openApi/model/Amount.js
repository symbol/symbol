/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';

/**
 * The Amount model module.
 * @module model/Amount
 * @version 1.4.13
 */
class Amount {
    /**
     * Constructs a new <code>Amount</code>.
     * Amount is some Value of a Currency. It is considered invalid to specify a Value without a Currency.
     * @alias module:model/Amount
     * @param value {String} Value of the transaction in atomic units represented as an arbitrary-sized signed integer. For example, 1 BTC would be represented by a value of 100000000.
     * @param currency {module:model/Currency} 
     */
    constructor(value, currency) { 
        
        Amount.initialize(this, value, currency);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, value, currency) { 
        obj['value'] = value;
        obj['currency'] = currency;
    }

    /**
     * Constructs a <code>Amount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Amount} obj Optional instance to populate.
     * @return {module:model/Amount} The populated <code>Amount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Amount();

            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Amount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Amount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Amount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          Currency.validateJSON(data['currency']);
        }

        return true;
    }


}

Amount.RequiredProperties = ["value", "currency"];

/**
 * Value of the transaction in atomic units represented as an arbitrary-sized signed integer. For example, 1 BTC would be represented by a value of 100000000.
 * @member {String} value
 */
Amount.prototype['value'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
Amount.prototype['currency'] = undefined;

/**
 * @member {Object} metadata
 */
Amount.prototype['metadata'] = undefined;






export default Amount;

