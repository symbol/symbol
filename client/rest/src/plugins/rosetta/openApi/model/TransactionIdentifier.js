/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';

/**
 * The TransactionIdentifier model module.
 * @module model/TransactionIdentifier
 * @version 1.4.13
 */
class TransactionIdentifier {
	/**
	 * Constructs a new <code>TransactionIdentifier</code>.
	 * The transaction_identifier uniquely identifies a transaction in a particular network and block or in the mempool.
	 * @alias module:model/TransactionIdentifier
	 * @param hash {String} Any transactions that are attributable only to a block (ex: a block event) should use the hash of the block as the identifier.  This should be normalized according to the case specified in the transaction_hash_case in network options.
	 */
	constructor(hash) {

		TransactionIdentifier.initialize(this, hash);
	}

	/**
	 * Initializes the fields of this object.
	 * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
	 * Only for internal use.
	 */
	static initialize(obj, hash) {
		obj['hash'] = hash;
	}

	/**
	 * Constructs a <code>TransactionIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
	 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
	 * @param {Object} data The plain JavaScript object bearing properties of interest.
	 * @param {module:model/TransactionIdentifier} obj Optional instance to populate.
	 * @return {module:model/TransactionIdentifier} The populated <code>TransactionIdentifier</code> instance.
	 */
	static constructFromObject(data, obj) {
		if (data) {
			obj = obj || new TransactionIdentifier();

			if (data.hasOwnProperty('hash')) {
				obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
			}
		}
		return obj;
	}

	/**
	 * Validates the JSON data with respect to <code>TransactionIdentifier</code>.
	 * @param {Object} data The plain JavaScript object bearing properties of interest.
	 * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionIdentifier</code>.
	 */
	static validateJSON(data) {
		// check to make sure all required properties are present in the JSON string
		for (const property of TransactionIdentifier.RequiredProperties) {
			if (!data.hasOwnProperty(property)) {
				throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
			}
		}
		// ensure the json data is a string
		if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
			throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
		}

		return true;
	}


}

TransactionIdentifier.RequiredProperties = ["hash"];

/**
 * Any transactions that are attributable only to a block (ex: a block event) should use the hash of the block as the identifier.  This should be normalized according to the case specified in the transaction_hash_case in network options.
 * @member {String} hash
 */
TransactionIdentifier.prototype['hash'] = undefined;






export default TransactionIdentifier;

