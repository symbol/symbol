/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';

/**
 * The SubNetworkIdentifier model module.
 * @module model/SubNetworkIdentifier
 * @version 1.4.13
 */
class SubNetworkIdentifier {
	/**
	 * Constructs a new <code>SubNetworkIdentifier</code>.
	 * In blockchains with sharded state, the SubNetworkIdentifier is required to query some object on a specific shard. This identifier is optional for all non-sharded blockchains.
	 * @alias module:model/SubNetworkIdentifier
	 * @param network {String}
	 */
	constructor(network) {

		SubNetworkIdentifier.initialize(this, network);
	}

	/**
	 * Initializes the fields of this object.
	 * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
	 * Only for internal use.
	 */
	static initialize(obj, network) {
		obj['network'] = network;
	}

	/**
	 * Constructs a <code>SubNetworkIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
	 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
	 * @param {Object} data The plain JavaScript object bearing properties of interest.
	 * @param {module:model/SubNetworkIdentifier} obj Optional instance to populate.
	 * @return {module:model/SubNetworkIdentifier} The populated <code>SubNetworkIdentifier</code> instance.
	 */
	static constructFromObject(data, obj) {
		if (data) {
			obj = obj || new SubNetworkIdentifier();

			if (data.hasOwnProperty('network')) {
				obj['network'] = ApiClient.convertToType(data['network'], 'String');
			}
			if (data.hasOwnProperty('metadata')) {
				obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
			}
		}
		return obj;
	}

	/**
	 * Validates the JSON data with respect to <code>SubNetworkIdentifier</code>.
	 * @param {Object} data The plain JavaScript object bearing properties of interest.
	 * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubNetworkIdentifier</code>.
	 */
	static validateJSON(data) {
		// check to make sure all required properties are present in the JSON string
		for (const property of SubNetworkIdentifier.RequiredProperties) {
			if (!data.hasOwnProperty(property)) {
				throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
			}
		}
		// ensure the json data is a string
		if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
			throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
		}

		return true;
	}


}

SubNetworkIdentifier.RequiredProperties = ["network"];

/**
 * @member {String} network
 */
SubNetworkIdentifier.prototype['network'] = undefined;

/**
 * @member {Object} metadata
 */
SubNetworkIdentifier.prototype['metadata'] = undefined;






export default SubNetworkIdentifier;

