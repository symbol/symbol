/**
*** Copyright (c) 2016-2019, Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp.
*** Copyright (c) 2020-present, Jaguar0625, gimre, BloodyRookie.
*** All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

#pragma once
#include <iosfwd>
#include <stdint.h>

namespace catapult {
namespace disruptor {

#define INPUT_SOURCE_LIST                                       \
	/* Input source is unknown. */                              \
	ENUM_VALUE(Unknown, 0)                                      \
                                                                \
	/* Input was generated by a local node (e.g. harvested). */ \
	ENUM_VALUE(Local, 1)                                        \
                                                                \
	/* Input was pulled from a remote node. */                  \
	ENUM_VALUE(Remote_Pull, 2)                                  \
                                                                \
	/* Input was pushed by a remote node. */                    \
	ENUM_VALUE(Remote_Push, 4)

#define ENUM_VALUE(LABEL, VALUE) LABEL = VALUE,
	/// Possible consumer input sources.
	enum class InputSource : uint32_t { INPUT_SOURCE_LIST };
#undef ENUM_VALUE

	/// Insertion operator for outputting \a value to \a out.
	std::ostream& operator<<(std::ostream& out, InputSource value);
}
}
